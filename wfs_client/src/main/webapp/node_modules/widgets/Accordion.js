
/*global define*/
define('widgets/Accordion/ext/ext.dom',[
    'jscore/base/jquery'
], function ($) {
    

    var dom = {};

    dom.getTagName = function (element) {
        return element._getHTMLElement().tagName.toLowerCase();
    };

    dom.getOuterHeight = function (element) {
        return $(element._getHTMLElement()).outerHeight(true);
    };

    return dom;

});
define('text!widgets/Accordion/_accordion.html',[],function () { return '<div class="ebAccordion">\n    <div class="ebAccordion-header">\n        <div class="ebAccordion-button" title="Expand">\n            <i class="ebIcon ebIcon_small"></i>\n        </div>\n        <span class="ebAccordion-title"></span>\n    </div>\n\n    <div class="ebAccordion-body"></div>\n</div>';});

/*global define, undefined, Error*/
define('widgets/Accordion/AccordionView',[
    'jscore/core',
    './ext/ext.dom',
    'text!./_accordion.html'
], function (core, domExt, template) {
    

    var AccordionView = core.View.extend({

        // TODO: Should be added to core.View and executed after render()
        afterRender: function () {
            this.title = this.getElement().find('.' + AccordionView.EL_TITLE);
            this.button = this.getElement().find('.' + AccordionView.EL_BUTTON);
            this.content = this.getElement().find('.' + AccordionView.EL_BODY);
            this.header = this.getElement().find('.' + AccordionView.EL_HEADER);
            this._icon = this.getElement().find('.' + AccordionView.EL_ICON);
            this._icon.setModifier('downArrow', '10px');

            this.contentHeight = 0;
            this.contentAppended = false;
            this.contentItem = undefined;
        },

        getTemplate: function () {
            return template;
        },

        getTitle: function () {
            return this.title;
        },

        getButton: function () {
            return this.button;
        },

        getContent: function () {
            return this.content;
        },

        getHeader: function () {
            return this.header;
        },

        setContentItem: function (contentItem) {
            this.contentItem = contentItem;
        },

        getContentItem: function () {
            return this.contentItem;
        },

        foldBody: function () {
            this._icon.removeModifier('upArrow');
            this._icon.setModifier('downArrow', '10px');
            this.button.setAttribute('title', 'Expand');

            this.getContent().setStyle('max-height', '0');
        },

        expandBody: function () {
            if (!this.contentAppended && this.getContentItem()) {
                if (this.getContentItem() instanceof core.Element) {
                    this.getContent().append(this.getContentItem());
                } else {
                    this.getContentItem().attachTo(this.getContent());
                }
            } else if (!this.getContentItem()) {
                throw new Error('Content for Accordion should not be undefined!');
            }

            this.recalculateHeight();
            this._icon.removeModifier('downArrow');
            this._icon.setModifier('upArrow', '10px');
            this.button.setAttribute('title', 'Collapse');

            this.getContent().setStyle('max-height', this.contentHeight + 'px');
        },

        recalculateHeight: function () {
            this.contentHeight = domExt.getOuterHeight(this.getContent().children()[0]);
        }

    }, {
        'EL_HEADER': 'ebAccordion-header',
        'EL_TITLE': 'ebAccordion-title',
        'EL_BUTTON': 'ebAccordion-button',
        'EL_ICON': 'ebIcon',
        'EL_BODY': 'ebAccordion-body'
    });

    return AccordionView;

});

/*global define, String, Error, undefined*/
define('widgets/Accordion/Accordion',[
    'widgets/main',
    './ext/ext.dom',
    './AccordionView'
], function (core, domExt, View) {
    

    /**
     * The Accordion class wraps a menu entry and its sub-menu list in a Widget.<br>
     * The Accordion can be instantiated using the constructor Accordion.
     *
     * <strong>Constructor:</strong>
     *   <ul>
     *     <li>Accordion(Object options)</li>
     *   </ul>
     *
     * <strong>Events:</strong>
     *   <ul>
     *     <li>click: this event is triggered when user clicks on the Accordion expand/collapse button</li>
     *     <li>expand: this event can be triggered by the Accordion widget to expand content</li>
     *     <li>collapse: this event can be triggered by the Accordion widget to collapse content</li>
     *   </ul>
     *
     * <strong>Options:</strong>
     *   <ul>
     *       <li>title: a string used for the accordion header.</li>
     *       <li>content: a content of String or core.Widget used as a accordion content.</li>
     *       <li>enabled: boolean indicating whether the accordion should be enabled. Default is true.</li>
     *   </ul>
     *
     * @class Accordion
     */
    return core.Widget.extend({
        /*jshint validthis:true */

        View: View,

        /**
         * The init method is automatically called by the constructor when using the "new" operator. If an object with
         * key/value pairs was passed into the constructor then the options variable will have those key/value pairs.
         *
         * @method init
         * @private
         * @param {Object} options
         */
        init: function (options) {
            this._expanded = false;
        },

        /**
         * Overrides method from widget.
         * Executes every time, when added back to the screen.
         *
         * @method onViewReady
         * @private
         */
        onViewReady: function () {
            // TODO: not yet in jsCore. Will add later.
            this.view.afterRender();

            this.setTitle(this.options.title || 'Accordion Header');

            this.setContent(this.options.content);

            if (this.options.enabled === false) {
                this.disable();
            }

            this.addEventHandler('click', _onButtonClick.bind(this));
            this.addEventHandler('expand', _expandEvent.bind(this));
            this.addEventHandler('collapse', _collapseEvent.bind(this));
        },

        /**
         * Sets title for the Accordion
         *
         * @method setTitle
         * @param {core.Widget|String} title Should be core.Widget or string
         */
        setTitle: function (title) {
            if (this._headerClickEventId) {
                this.view.getHeader().removeEventHandler(this._headerClickEventId);
                this._headerClickEventId = undefined;
            }
            if (this._buttonClickEventId) {
                this.view.getButton().removeEventHandler(this._buttonClickEventId);
                this._buttonClickEventId = undefined;
            }
            this.view.getHeader().removeModifier('noAction');

            if (typeof(title) === 'string' || title instanceof String) {
                this.view.getTitle().setText(title);

                this._headerClickEventId = this.view.getHeader().addEventHandler('click', function () {
                    this.trigger('click');
                }, this);
            } else if (title instanceof core.Widget) {
                this.view.getHeader().setModifier('noAction');
                title.attachTo(this.view.getTitle());

                this._buttonClickEventId = this.view.getButton().addEventHandler('click', function () {
                    this.trigger('click');
                }, this);
            } else {
                throw new Error('Title for Accordion should be core.Widget or String!');
            }
        },

        /**
         * Sets content for the Accordion.
         *
         * @method setContent
         * @param {core.Widget|String} content Should be core.Widget or string
         */
        setContent: function (content) {
            var contentEl = this.view.getContent();
            contentEl.children().forEach(function (child) {
                child.detach();
            });

            if (content) {
                if (typeof(content) === 'string' || content instanceof String) {
                    var element = new core.Element();
                    element.setText(content);
                    this.view.setContentItem(element);
                } else if (content instanceof core.Widget) {
                    this.view.setContentItem(content);
                } else {
                    throw new Error('Content for Accordion should be core.Widget or String!');
                }

                this.enable();
            } else {
                this.disable();
            }
        },

        /**
         * Enables the accordion
         *
         * @method enable
         */
        enable: function () {
            this.enabled = true;
            this.getElement().removeModifier('disabled');
            this.view.getButton().setAttribute('title', 'Expand');
        },

        /**
         * Disables the accordion
         *
         * @method disable
         */
        disable: function () {
            this.enabled = false;
            this.getElement().setModifier('disabled');
            this.view.foldBody();
            this.view.getButton().setAttribute('title', 'Disabled');
        }

        /**
         * Adds the Widget's element to the new parent element.
         *
         * @method attachTo
         * @param {Element} parent
         * @example
         *    widget.attachTo(this.getElement());
         */

        /**
         * Places the detached Widget back into the defined parent element.
         *
         * @method attach
         * @example
         *  widget.attach();
         */

        /**
         * Removes the Widget from the parent element, but does not destroy the Widget. DOM events will still work when Widget is attached back.
         *
         * @method detach
         * @example
         *  widget.detach();
         */

    });

    /* ++++++++++++++++++++++++++++++++++++++++++ PRIVATE METHODS ++++++++++++++++++++++++++++++++++++++++++ */
    /**
     * An event which is executed when clicked on the Accordion expand/collapse button
     *
     * @method _onButtonClick
     * @private
     */
    function _onButtonClick() {
        if (!this.enabled) {
            return;
        }

        if (this._expanded) {
            this.trigger('collapse');
        } else {
            this.trigger('expand');
        }
    }

    /**
     * An event which is executed when the Accordion should expand
     *
     * @method _expandEvent
     * @private
     */
    function _expandEvent() {
        if (!this.enabled) {
            return;
        }

        this.view.expandBody();
        this._expanded = true;
    }

    /**
     * An event which is executed when the Accordion should collapse
     *
     * @method _collapseEvent
     * @private
     */
    function _collapseEvent() {
        this.view.foldBody();
        this._expanded = false;
    }

});

define('widgets/Accordion', ['widgets/Accordion/Accordion'], function (main) { return main; });
