
/**
 * @license RequireJS text 2.0.1 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/requirejs/text for details
 */
/*jslint regexp: true */
/*global require: false, XMLHttpRequest: false, ActiveXObject: false,
  define: false, window: false, process: false, Packages: false,
  java: false, location: false */

define('text', ['module'], function (module) {
    

    var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
        xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        hasLocation = typeof location !== 'undefined' && location.href,
        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''),
        defaultHostName = hasLocation && location.hostname,
        defaultPort = hasLocation && (location.port || undefined),
        buildMap = [],
        masterConfig = (module.config && module.config()) || {},
        text, fs;

    text = {
        version: '2.0.1',

        strip: function (content) {
            //Strips <?xml ...?> declarations so that external SVG and XML
            //documents can be added to a document without worry. Also, if the string
            //is an HTML document, only the part inside the body tag is returned.
            if (content) {
                content = content.replace(xmlRegExp, "");
                var matches = content.match(bodyRegExp);
                if (matches) {
                    content = matches[1];
                }
            } else {
                content = "";
            }
            return content;
        },

        jsEscape: function (content) {
            return content.replace(/(['\\])/g, '\\$1')
                .replace(/[\f]/g, "\\f")
                .replace(/[\b]/g, "\\b")
                .replace(/[\n]/g, "\\n")
                .replace(/[\t]/g, "\\t")
                .replace(/[\r]/g, "\\r")
                .replace(/[\u2028]/g, "\\u2028")
                .replace(/[\u2029]/g, "\\u2029");
        },

        createXhr: masterConfig.createXhr || function () {
            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
            var xhr, i, progId;
            if (typeof XMLHttpRequest !== "undefined") {
                return new XMLHttpRequest();
            } else if (typeof ActiveXObject !== "undefined") {
                for (i = 0; i < 3; i += 1) {
                    progId = progIds[i];
                    try {
                        xhr = new ActiveXObject(progId);
                    } catch (e) {}

                    if (xhr) {
                        progIds = [progId];  // so faster next time
                        break;
                    }
                }
            }

            return xhr;
        },

        /**
         * Parses a resource name into its component parts. Resource names
         * look like: module/name.ext!strip, where the !strip part is
         * optional.
         * @param {String} name the resource name
         * @returns {Object} with properties "moduleName", "ext" and "strip"
         * where strip is a boolean.
         */
        parseName: function (name) {
            var strip = false, index = name.indexOf("."),
                modName = name.substring(0, index),
                ext = name.substring(index + 1, name.length);

            index = ext.indexOf("!");
            if (index !== -1) {
                //Pull off the strip arg.
                strip = ext.substring(index + 1, ext.length);
                strip = strip === "strip";
                ext = ext.substring(0, index);
            }

            return {
                moduleName: modName,
                ext: ext,
                strip: strip
            };
        },

        xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,

        /**
         * Is an URL on another domain. Only works for browser use, returns
         * false in non-browser environments. Only used to know if an
         * optimized .js version of a text resource should be loaded
         * instead.
         * @param {String} url
         * @returns Boolean
         */
        useXhr: function (url, protocol, hostname, port) {
            var match = text.xdRegExp.exec(url),
                uProtocol, uHostName, uPort;
            if (!match) {
                return true;
            }
            uProtocol = match[2];
            uHostName = match[3];

            uHostName = uHostName.split(':');
            uPort = uHostName[1];
            uHostName = uHostName[0];

            return (!uProtocol || uProtocol === protocol) &&
                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&
                   ((!uPort && !uHostName) || uPort === port);
        },

        finishLoad: function (name, strip, content, onLoad) {
            content = strip ? text.strip(content) : content;
            if (masterConfig.isBuild) {
                buildMap[name] = content;
            }
            onLoad(content);
        },

        load: function (name, req, onLoad, config) {
            //Name has format: some.module.filext!strip
            //The strip part is optional.
            //if strip is present, then that means only get the string contents
            //inside a body tag in an HTML string. For XML/SVG content it means
            //removing the <?xml ...?> declarations so the content can be inserted
            //into the current doc without problems.

            // Do not bother with the work if a build and text will
            // not be inlined.
            if (config.isBuild && !config.inlineText) {
                onLoad();
                return;
            }

            masterConfig.isBuild = config.isBuild;

            var parsed = text.parseName(name),
                nonStripName = parsed.moduleName + '.' + parsed.ext,
                url = req.toUrl(nonStripName),
                useXhr = (masterConfig.useXhr) ||
                         text.useXhr;

            //Load the text. Use XHR if possible and in a browser.
            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
                text.get(url, function (content) {
                    text.finishLoad(name, parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            } else {
                //Need to fetch the resource across domains. Assume
                //the resource has been optimized into a JS module. Fetch
                //by the module name + extension, but do not include the
                //!strip part to avoid file system issues.
                req([nonStripName], function (content) {
                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                                    parsed.strip, content, onLoad);
                });
            }
        },

        write: function (pluginName, moduleName, write, config) {
            if (buildMap.hasOwnProperty(moduleName)) {
                var content = text.jsEscape(buildMap[moduleName]);
                write.asModule(pluginName + "!" + moduleName,
                               "define(function () { return '" +
                                   content +
                               "';});\n");
            }
        },

        writeFile: function (pluginName, moduleName, req, write, config) {
            var parsed = text.parseName(moduleName),
                nonStripName = parsed.moduleName + '.' + parsed.ext,
                //Use a '.js' file name so that it indicates it is a
                //script that can be loaded across domains.
                fileName = req.toUrl(parsed.moduleName + '.' +
                                     parsed.ext) + '.js';

            //Leverage own load() method to load plugin value, but only
            //write out values that do not have the strip argument,
            //to avoid any potential issues with ! in file names.
            text.load(nonStripName, req, function (value) {
                //Use own write() method to construct full module value.
                //But need to create shell that translates writeFile's
                //write() to the right interface.
                var textWrite = function (contents) {
                    return write(fileName, contents);
                };
                textWrite.asModule = function (moduleName, contents) {
                    return write.asModule(moduleName, fileName, contents);
                };

                text.write(pluginName, nonStripName, textWrite, config);
            }, config);
        }
    };

    if (typeof process !== "undefined" &&
             process.versions &&
             !!process.versions.node) {
        //Using special require.nodeRequire, something added by r.js.
        fs = require.nodeRequire('fs');

        text.get = function (url, callback) {
            var file = fs.readFileSync(url, 'utf8');
            //Remove BOM (Byte Mark Order) from utf8 files if it is there.
            if (file.indexOf('\uFEFF') === 0) {
                file = file.substring(1);
            }
            callback(file);
        };
    } else if (text.createXhr()) {
        text.get = function (url, callback, errback) {
            var xhr = text.createXhr();
            xhr.open('GET', url, true);

            //Allow overrides specified in config
            if (masterConfig.onXhr) {
                masterConfig.onXhr(xhr, url);
            }

            xhr.onreadystatechange = function (evt) {
                var status, err;
                //Do not explicitly handle errors, those should be
                //visible via console output in the browser.
                if (xhr.readyState === 4) {
                    status = xhr.status;
                    if (status > 399 && status < 600) {
                        //An http 4xx or 5xx error. Signal an error.
                        err = new Error(url + ' HTTP status: ' + status);
                        err.xhr = xhr;
                        errback(err);
                    } else {
                        callback(xhr.responseText);
                    }
                }
            };
            xhr.send(null);
        };
    } else if (typeof Packages !== 'undefined') {
        //Why Java, why is this so awkward?
        text.get = function (url, callback) {
            var encoding = "utf-8",
                file = new java.io.File(url),
                lineSeparator = java.lang.System.getProperty("line.separator"),
                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),
                stringBuffer, line,
                content = '';
            try {
                stringBuffer = new java.lang.StringBuffer();
                line = input.readLine();

                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
                // http://www.unicode.org/faq/utf_bom.html

                // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
                if (line && line.length() && line.charAt(0) === 0xfeff) {
                    // Eat the BOM, since we've already found the encoding on this file,
                    // and we plan to concatenating this buffer with others; the BOM should
                    // only appear at the top of a file.
                    line = line.substring(1);
                }

                stringBuffer.append(line);

                while ((line = input.readLine()) !== null) {
                    stringBuffer.append(lineSeparator);
                    stringBuffer.append(line);
                }
                //Make sure we return a JavaScript string and not a Java string.
                content = String(stringBuffer.toString()); //String
            } finally {
                input.close();
            }
            callback(content);
        };
    }

    return text;
});

define('text!widgets/SelectBox/_selectBox.html',[],function () { return '<div class="ebSelect">\n    <button type="button" class="ebSelect-Header">\n        <span class="ebSelect-value"></span>\n        <span class="ebSelect-iconHolder"><i class="ebIcon ebIcon_small ebIcon_downArrow_10px"></i></span>\n    </button>\n    <div class="ebSelect-list"></div>\n</div>';});

/*global define*/
define('widgets/SelectBox/SelectBoxView',[
    'jscore/core',
    'text!./_selectBox.html'
], function (core, template) {
    

    var SelectBoxView = core.View.extend({

        // TODO: Should be added to core.View and executed after render()
        afterRender: function () {
            this.value = this.getElement().find('.' + SelectBoxView.EL_VALUE);
            this.button = this.getElement().find('.' + SelectBoxView.EL_HEADER);
            this.list = this.getElement().find('.' + SelectBoxView.EL_LIST);
        },

        getTemplate: function () {
            return template;
        },

        getRoot: function () {
            return this.getElement();
        },

        getValueEl: function () {
            return this.value;
        },

        getButton: function () {
            return this.button;
        },

        getList: function () {
            return this.list;
        }

    }, {
        'EL_VALUE': 'ebSelect-value',
        'EL_HEADER': 'ebSelect-Header',
        'EL_LIST': 'ebSelect-list'
    });

    return SelectBoxView;

});
define('text!widgets/ComponentList/_componentList.html',[],function () { return '<div class="ebComponentList"></div>';});

define('text!widgets/ComponentList/_componentListItem.html',[],function () { return '<div class="ebComponentList-item"></div>';});

define('text!widgets/ComponentList/_componentListSeparator.html',[],function () { return '<div class="ebComponentList-separator"></div>';});

/*global define*/
define('widgets/ComponentList/ComponentListView',[
    'jscore/core',
    'text!./_componentList.html',
    'text!./_componentListItem.html',
    'text!./_componentListSeparator.html'
], function (core, template, listItemTemplate, listSeparatorTemplate) {
    

    return core.View.extend({

        getTemplate: function () {
            return template;
        },

        // TODO: Should be added to core.View and executed after render()
        afterRender: function () {},

        addItem: function (itemObj) {
            var $itemEl = core.Element.parse(listItemTemplate);
            $itemEl.setText(itemObj.name);
            $itemEl.setAttribute('title', itemObj.title ? itemObj.title : itemObj.name);

            this.getElement().append($itemEl);
            return $itemEl;
        },

        addSeparator: function () {
            this.getElement().append(core.Element.parse(listSeparatorTemplate));
        }

    });

});
/*global define, Object*/
define('widgets/ComponentList/ComponentList',[
    'widgets/main',
    './ComponentListView'
], function (core, View) {
    

    /**
     * The ComponentList class uses the Ericsson brand assets.<br>
     * The ComponentList can be instantiated using the constructor ComponentList.
     *
     * <strong>Constructor:</strong>
     *   <ul>
     *     <li>ComponentList(Object options)</li>
     *   </ul>
     *
     * <strong>Events:</strong>
     *   <ul>
     *     <li>itemSelected: this event is triggered when value is selected in the ComponentList</li>
     *   </ul>
     *
     * <strong>Options:</strong>
     *   <ul>
     *       <li>items: an array used as a list of available items in the ComponentList</li>
     *   </ul>
     *
     * @private
     * @class ComponentList
     */
    return core.Widget.extend({
        /*jshint validthis:true */

        // constants
        TYPE_SEPARATOR: 'separator',

        View: View,

        /**
         * The init method is automatically called by the constructor when using the "new" operator. If an object with
         * key/value pairs was passed into the constructor then the options variable will have those key/value pairs.
         *
         * @method init
         * @param {Object} options
         * @private
         */
        init: function (options) {
            this.selectedItem = {};
        },

        /**
         * Overrides method from widget.
         * Executes every time, when added back to the screen.
         *
         * @method onViewReady
         * @private
         */
        onViewReady: function () {
            // TODO: not yet in jsCore. Will be removed in the future.
            this.view.afterRender();

            if (this.options.items !== undefined) {
                this.setItems(this.options.items);
            }

            this.getElement().addEventHandler('itemSelected', function () {
                this.trigger('itemSelected');
            }, this);
        },

        /**
         * Gets values from the ComponentList
         *
         * @method getItems
         * @return {Array} items
         */
        getItems: function () {
            return this.items;
        },

        /**
         * Sets values to the ComponentList
         *
         * @method setItems
         * @param {Array} items
         */
        setItems: function (items) {
            this.getElement().children().forEach(function (child) {
                child.remove();
            });

            if (items.length === 0) {
                return;
            }
            this.items = items;

            items.forEach(function (itemObj, index) {
                if (itemObj.type === this.TYPE_SEPARATOR) {
                    this.view.addSeparator();
                } else {
                    var $item = this.view.addItem(itemObj);
                    $item.addEventHandler('click', function () {
                        _onListItemClicked.call(this, index);
                    }, this);
                }
            }, this);
        },

        /**
         * Returns current selected item
         *
         * @method getSelectedValue
         * @return {String}
         */
        getSelectedValue: function () {
            return this.selectedItem;
        }

        /**
         * Add event handle for the ComponentList
         *
         * @method addEventHandler
         * @param {String} action
         * @param {Function} callback
         * @param {Object} context
         */

    });

    /* ++++++++++++++++++++++++++++++++++++++++++ PRIVATE METHODS ++++++++++++++++++++++++++++++++++++++++++ */

    /**
     * An event which is executed when on the list item is clicked
     *
     * @method _onListItemClicked
     * @param {int} index
     * @private
     */
    function _onListItemClicked (index) {
        this.selectedItem = this.items[index];
        if (this.selectedItem !== null) {
            this.trigger('itemSelected');
        }
    }


});

define('widgets/ComponentList', ['widgets/ComponentList/ComponentList'], function (main) { return main; });

/*global define*/
define('widgets/SelectBox/SelectBox',[
    'widgets/main',
    './SelectBoxView',
    'widgets/ComponentList'
], function (core, View, ComponentList) {
    

    /**
     * The SelectBox class uses the Ericsson brand assets.<br>
     * The SelectBox can be instantiated using the constructor SelectBox.
     *
     * <strong>Constructor:</strong>
     *   <ul>
     *     <li>SelectBox(Object options)</li>
     *   </ul>
     *
     * <strong>Events:</strong>
     *   <ul>
     *     <li>change: this event is triggered when value is changed in the SelectBox</li>
     *     <li>focus: this event is triggered when the SelectBox is focused</li>
     *     <li>click: this event is triggered when user clicks on the SelectBox</li>
     *   </ul>
     *
     * <strong>Options:</strong>
     *   <ul>
     *       <li>value: an object used as a selected item of the SelectBox</li>
     *       <li>items: an array used as a list of available items in the SelectBox</li>
     *       <li>enabled: boolean indicating whether the SelectBox should be enabled. Default is true.</li>
     *       <li>modifiers: an array used to define modifiers for the SelectBox.
     *       <a name="modifierAvailableList"></a>
     *          <br>E.g: modifiers:[{name: 'foo'}, {name: 'bar', value:'barVal'}]
     *          <ul style="padding-left: 15px;">
     *              <li>disabled: disabled (Asset Library)</li>
     *              <li>miniW, smallW, longW, xLongW: width variations (Asset Library)</li>
     *          </ul>
     *       </li>
     *   </ul>
     *
     * @class SelectBox
     */
    return core.Widget.extend({
        /*jshint validthis:true*/

        View: View,

        /**
         * The init method is automatically called by the constructor when using the "new" operator. If an object with
         * key/value pairs was passed into the constructor then the options variable will have those key/value pairs.
         *
         * @method init
         * @private
         * @param {Object} options
         */
        init: function (options) {
            this.selectedItem = {};
        },

        /**
         * Overrides method from widget.
         * Executes every time, when added back to the screen.
         *
         * @method onViewReady
         * @private
         */
        onViewReady: function () {
            // TODO: not yet in jsCore. Will be removed in the future.
            this.view.afterRender();

            if (this.options.enabled === false) {
                this.disable();
            } else {
                this.enable();
            }

            this.setValue(this.options.value || {});
            this.setItems(this.options.items || []);
            this.setModifiers(this.options.modifiers || []);

            this.getElement().addEventHandler('change', function () {
                this.trigger('change');
            }, this);

            this.view.getButton().addEventHandler('focus', function () {
                this.trigger('focus');
            }, this);

            this.view.getButton().addEventHandler('click', function () {
                this.trigger('click');
            }, this);
        },

        /**
         * Sets value for the SelectBox.
         *
         * @method setValue
         * @param {Object} value
         */
        setValue: function (value) {
            var valueName = '';
            if (value !== {}) {
                valueName = value.name;
            }
            this.selectedItem = value;
            this.view.getValueEl().setText(valueName);
        },

        /**
         * Returns selected item object from the SelectBox.
         *
         * @method getValue
         * @return {Object} value
         */
        getValue: function () {
            return this.selectedItem;
        },

        /**
         * Sets items for the SelectBox. If items array is empty than field is disabled.
         *
         * @method setItems
         * @param {Array} items
         */
        setItems: function (items) {
            if (items.length > 0) {
                if (this.componentList === undefined) {
                    this.componentList = new ComponentList({
                        items: items
                    });
                    this.componentList.attachTo(this.view.getList());
                    this.componentList.addEventHandler('itemSelected', _onComponentListClick, this);
                } else {
                    this.componentList.setItems(items);
                }
            } else {
                this.disable();
            }
        },

        /**
         * Enables the SelectBox.
         *
         * @method enable
         */
        enable: function () {
            this.getElement().removeModifier('disabled');
            this.view.getButton().setAttribute('disabled', false);
            this.view.getButton().addEventHandler('click', _onSelectBoxClick, this);
        },

        /**
         * Disables the SelectBox.
         *
         * @method disable
         */
        disable: function () {
            this.getElement().setModifier('disabled');
            this.view.getButton().setAttribute('disabled', true);
            this.view.getButton().removeEventHandler('click');
        },

        /**
         * Add a single modifier to the widget.<br>
         * <a href="#modifierAvailableList">see available modifiers</a>
         *
         * @method setModifier
         * @param {String} key
         * @param {String|boolean|int} value
         */
        setModifier: function (key, value) {
            this.getElement().setModifier(key, value);
        },

        /**
         * A methods, which allows to define a list of modifiers to the widget.<br>
         * <a href="#modifierAvailableList">see available modifiers</a>
         *
         * @param {Array} modifiers Contains objects {name: {String}[, value: {String}]}
         */
        setModifiers: function (modifiers) {
            modifiers.forEach(function (modifier) {
                this.setModifier(modifier.name, modifier.value);
            }, this);
        },

        /**
         * Remove the modifier 'key' from the widget modifiers.
         *
         * @method removeModifier
         * @param {String} key
         */
        removeModifier: function (key) {
            this.getElement().removeModifier(key);
        }

        /**
         * Adds the Widget's element to the new parent element.
         *
         * @method attachTo
         * @param {Element} parent
         * @example
         *    widget.attachTo(this.getElement());
         */

        /**
         * Places the detached Widget back into the defined parent element.
         *
         * @method attach
         * @example
         *  widget.attach();
         */

        /**
         * Removes the Widget from the parent element, but does not destroy the Widget. DOM events will still work when Widget is attached back.
         *
         * @method detach
         * @example
         *  widget.detach();
         */

        /**
         * Add event handler to the SelectBox.
         *
         * @method addEventHandler
         * @param {String} action  (change|focus|click)
         * @param {Function} callback
         * @param {Object} context
         * @return {String} eventID
         */

        /**
         * Remove the event handler from the SelectBox.
         *
         * @method removeEventHandler
         * @param {String} eventID
         */

    });

    /* ++++++++++++++++++++++++++++++++++++++++++ PRIVATE METHODS ++++++++++++++++++++++++++++++++++++++++++ */

    /**
     * An event which is executed when clicked on the SelectBox
     *
     * @method onSelectBoxClick
     * @private
     */
    function _onSelectBoxClick () {
        this.view.getButton().trigger('focus');
    }

    /**
     * An event which is executed when a value is selected from the ComponentList
     *
     * @method _onComponentListClick
     * @private
     */
    function _onComponentListClick () {
        var selectedVal = this.componentList.getSelectedValue();
        if (selectedVal !== this.getValue()) {
            this.setValue(selectedVal);
            this.getElement().trigger('change');
        }
    }

});

define('widgets/SelectBox', ['widgets/SelectBox/SelectBox'], function (main) { return main; });

define('template!widgets/MultiSelectBox/MultiList/_multiList.html',['jscore/handlebars/handlebars'],function (Handlebars) { return Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, stack2, foundHelper, tmp1, self=this, functionType="function", helperMissing=helpers.helperMissing, undef=void 0, escapeExpression=this.escapeExpression;

function program1(depth0,data) {
  
  var buffer = "", stack1, stack2;
  buffer += "\n    ";
  foundHelper = helpers.name;
  stack1 = foundHelper || depth0.name;
  stack2 = helpers['if'];
  tmp1 = self.program(2, program2, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    ";
  foundHelper = helpers.type;
  stack1 = foundHelper || depth0.type;
  stack2 = helpers['if'];
  tmp1 = self.program(5, program5, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    ";
  return buffer;}
function program2(depth0,data) {
  
  var buffer = "", stack1, stack2;
  buffer += "\n    <div class=\"ebComponentList-item\">\n        <label>\n            <input class=\"ebCheckbox\" type=\"checkbox\" value=\"";
  foundHelper = helpers.value;
  stack1 = foundHelper || depth0.value;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "value", { hash: {} }); }
  buffer += escapeExpression(stack1) + "\"";
  foundHelper = helpers.checked;
  stack1 = foundHelper || depth0.checked;
  stack2 = helpers['if'];
  tmp1 = self.program(3, program3, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n            <span class=\"ebCheckbox-inputStatus\"></span>\n            <span class=\"ebCheckbox-label\">";
  foundHelper = helpers.name;
  stack1 = foundHelper || depth0.name;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "name", { hash: {} }); }
  buffer += escapeExpression(stack1) + "</span>\n        </label>\n    </div>\n    ";
  return buffer;}
function program3(depth0,data) {
  
  
  return " checked";}

function program5(depth0,data) {
  
  
  return "\n    <div class=\"ebComponentList-separator\"></div>\n    ";}

  buffer += "<div class=\"ebComponentList\">\n    ";
  foundHelper = helpers.items;
  stack1 = foundHelper || depth0.items;
  stack2 = helpers.each;
  tmp1 = self.program(1, program1, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</div>";
  return buffer;});});

/*global define*/
define('widgets/MultiSelectBox/MultiList/MultiListView',[
    'jscore/core',
    'template!./_multiList.html',
    'widgets/utils/domUtils'
], function (core, template, domUtils) {
    

    var MultiListView = core.View.extend({

        getTemplate: function () {
            return template(this.options.template);
        },

        // TODO: Should be added to core.View and executed after render()
        afterRender: function () {
            this.items = domUtils.findAll('.' + MultiListView.EL_ITEM, this.getElement());
        },

        getItems: function () {
            return this.items;
        }

    }, {
        EL_ITEM: 'ebComponentList-item',
        EL_CHECKBOX: 'ebCheckbox',
        EL_LABEL: 'ebCheckbox-label'
    });

    return MultiListView;

});
/*global define*/
define('widgets/MultiSelectBox/MultiList/MultiList',[
    'widgets/main',
    './MultiListView'
], function (core, View) {
    

    /**
     * The MultiList class uses the Ericsson brand assets.<br>
     * The MultiList can be instantiated using the constructor MultiList.
     *
     * <strong>Constructor:</strong>
     *   <ul>
     *     <li>MultiList(Object options)</li>
     *   </ul>
     *
     * <strong>Events:</strong>
     *   <ul>
     *     <li>itemChanged: this event is triggered when value is selected in the MultiList</li>
     *   </ul>
     *
     * <strong>Options:</strong>
     *   <ul>
     *       <li>items: an array used as list of available items in the MultiList</li>
     *   </ul>
     *
     * @private
     * @class MultiList
     */
    return core.Widget.extend({
        /*jshint validthis:true*/

        /**
         * The init method is automatically called by the constructor when using the "new" operator. If an object with
         * key/value pairs was passed into the constructor then the options variable will have those key/value pairs.
         *
         * @method init
         * @param {Object} options
         * @private
         */
        init: function (options) {
            this.options = options || {};

            this.view = new View({
                template: {items: options.items}
            });
        },

        /**
         * Overrides method from widget.
         * Executes every time, when added back to the screen.
         *
         * @method onViewReady
         * @private
         */
        onViewReady: function () {
            // TODO: not yet in jsCore. Will be removed in the future.
            this.view.afterRender();

            this.$items = this.view.getItems();
            this.$items.forEach(function ($item, index) {
                var $checkbox = $item.find('.' + View.EL_CHECKBOX);

                if ($checkbox) {
                    $checkbox.addEventHandler('change', _onListItemClicked.bind(this, index, $checkbox));
                }
            }, this);

            this.getElement().addEventHandler('itemChanged', function () {
                this.trigger('itemChanged');
            }, this);
        },

        /**
         * Returns array of items from the multi list
         *
         * @method getItems
         * @return {Array} Items
         */
        getItems: function () {
            return this.options.items;
        },

        /**
         * Returns array of selected items from the MultiList
         *
         * @method getSelectedValues
         * @return {Array} Selected items
         */
        getSelectedItems: function () {
            var selectedItems = [];
            this.options.items.forEach(function (item) {
                if (item.checked === true) {
                    selectedItems.push(item);
                }
            });
            return selectedItems;
        }

        /**
         * Add event handle for the component list
         *
         * @method addEventHandler
         * @param {String} action
         * @param {Function} callback
         * @param {Object} context
         */

    });

    /* ++++++++++++++++++++++++++++++++++++++++++ PRIVATE METHODS ++++++++++++++++++++++++++++++++++++++++++ */

    /**
     * An event which is executed when on the list item is clicked
     *
     * @method _onListItemClicked
     * @param {int} index
     * @param {code.Element} $checkbox
     * @private
     */
    function _onListItemClicked (index, $checkbox) {
        this.options.items[index].checked = $checkbox.getProperty('checked');
        this.getElement().trigger('itemChanged');
    }

});

/*global define, undefined*/
define('widgets/MultiSelectBox/MultiSelectBox',[
    'widgets/SelectBox',
    './MultiList/MultiList'
], function (SelectBox, MultiList) {
    

    /**
     * The MultiSelectBox class uses the Ericsson brand assets.<br>
     * The MultiSelectBox can be instantiated using the constructor MultiSelectBox.
     *
     * <strong>Constructor:</strong>
     *   <ul>
     *     <li>MultiSelectBox(Object options)</li>
     *   </ul>
     *
     * <strong>Events:</strong>
     *   <ul>
     *     <li>change: this event is triggered when value is changed in the MultiSelectBox</li>
     *     <li>focus: this event is triggered when the MultiSelectBox is focused</li>
     *     <li>click: this event is triggered when user clicks on the MultiSelectBox</li>
     *   </ul>
     *
     * <strong>Options:</strong>
     *   <ul>
     *       <li>items: an array used as a list of available items in the selectBox</li>
     *       <li>enabled: boolean indicating whether selectBox should be enabled. Default is true.</li>
     *       <li>modifiers: an array used to define modifiers for the SelectBox.
     *       <a name="modifierAvailableList"></a>
     *          <br>E.g: modifiers:[{name: 'foo'}, {name: 'bar', value:'barVal'}]
     *          <ul style="padding-left: 15px;">
     *              <li>disabled: disabled (Asset Library)</li>
     *              <li>miniW, smallW, longW, xLongW: width variations (Asset Library)</li>
     *          </ul>
     *       </li>
     *   </ul>
     *
     * @class MultiSelectBox
     */
    return SelectBox.extend({
        /*jshint validthis:true*/

        /**
         * Sets value for the MultiSelectBox.
         *
         * @method setValue
         * @private
         * @param {String} value
         */
        setValue: function (value) {},

        /**
         * Returns value for the MultiSelectBox.
         *
         * @method getValue
         * @private
         * @return {String} value
         */
        getValue: function () {},

        /**
         * Sets items for the MultiSelectBox. If items array is empty than field is disabled.
         *
         * @method setItems
         * @param {Array} items
         */
        setItems: function (items) {
            delete this.items;
            this.items = items;

            if (this.componentList !== undefined) {
                this.view.getList().children().forEach(function (child) {
                    child.remove();
                });

                this.componentList.destroy();
                delete this.componentList;
            }

            if (items.length > 0) {
                this.componentList = new MultiList({
                    items: items
                });
                this.componentList.attachTo(this.view.getList());
                this.componentList.addEventHandler('itemChanged', _onMultiListClick, this);
            } else {
                this.disable();
            }

            _updateMultiSelectValue.call(this);
        },

        /**
         * Returns array of selected items from the MultiSelectBox.
         *
         * @returns {Array} Selected items
         */
        getSelectedItems: function () {
            return (this.componentList ? this.componentList.getSelectedItems() : []);
        }

        /**
         * Adds the Widget's element to the new parent element.
         *
         * @method attachTo
         * @param {Element} parent
         * @example
         *    widget.attachTo(this.getElement());
         */

        /**
         * Places the detached Widget back into the defined parent element.
         *
         * @method attach
         * @example
         *  widget.attach();
         */

        /**
         * Removes the Widget from the parent element, but does not destroy the Widget. DOM events will still work when Widget is attached back.
         *
         * @method detach
         * @example
         *  widget.detach();
         */

        /**
         * Add event handler to the dropdown.
         *
         * @method addEventHandler
         * @param {String} action  (change|focus|click)
         * @param {Function} callback
         * @param {Object} context
         * @return {String} eventID
         */

        /**
         * Remove the event handler from the MultiSelectBox.
         *
         * @method removeEventHandler
         * @param {String} eventID
         */

        /**
         * Enables the MultiSelectBox.
         *
         * @method enable
         */

        /**
         * Disables the MultiSelectBox.
         *
         * @method disable
         */

        /**
         * Add a single modifier to the widget.<br>
         * <a href="#modifierAvailableList">see available modifiers</a>
         *
         * @method setModifier
         * @param {String} key
         * @param {String|boolean|int} value
         */

        /**
         * A methods, which allows to define a list of modifiers to the widget.<br>
         * <a href="#modifierAvailableList">see available modifiers</a>
         *
         * @param {Array} modifiers Contains objects {name: {String}[, value: {String}]}
         */

        /**
         * Remove the modifier 'key' from the widget modifiers.
         *
         * @method removeModifier
         * @param {String} key
         */

    });

    /* ++++++++++++++++++++++++++++++++++++++++++ PRIVATE METHODS ++++++++++++++++++++++++++++++++++++++++++ */

    /**
     * An event which is executed when a value is selected from the multiList
     *
     * @method _onMultiListClick
     * @private
     */
    function _onMultiListClick () {
        this.view.getButton().trigger('focus');
        _updateMultiSelectValue.call(this);
    }

    /**
     * Updates value for the MultiSelectBox
     */
    function _updateMultiSelectValue () {
        var itemsCount = this.componentList ? this.componentList.getSelectedItems().length : 0;
        this.view.getValueEl().setText(itemsCount > 0 ? itemsCount + ' selected' : 'Select options');
    }

});

define('widgets/MultiSelectBox', ['widgets/MultiSelectBox/MultiSelectBox'], function (main) { return main; });
