
define('text!widgets/Breadcrumb/_breadcrumb.html',[],function () { return '<div class="ebBreadcrumbs"></div>';});

/*global define*/
define('widgets/Breadcrumb/BreadcrumbView',[
    'jscore/core',
    'text!./_breadcrumb.html'
], function (core, template) {
    

    return core.View.extend({

        getTemplate: function () {
            return template;
        }

    });

});
define('template!widgets/Breadcrumb/BreadcrumbItem/_breadcrumbItem.html',['jscore/handlebars/handlebars'],function (Handlebars) { return Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, stack2, foundHelper, tmp1, self=this, functionType="function", helperMissing=helpers.helperMissing, undef=void 0, escapeExpression=this.escapeExpression;

function program1(depth0,data) {
  
  var buffer = "", stack1, stack2;
  buffer += "\n        <span class=\"ebBreadcrumbs-arrow\" tabindex=\"1\">\n            <i class=\"ebIcon ebIcon_small ebIcon_interactive ebIcon_downArrow_10px\"></i>\n        </span>\n    <div class=\"ebBreadcrumbs-list\">\n        <ul class=\"ebComponentList\">\n            ";
  foundHelper = helpers.children;
  stack1 = foundHelper || depth0.children;
  stack2 = helpers.each;
  tmp1 = self.program(2, program2, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </ul>\n    </div>\n    ";
  return buffer;}
function program2(depth0,data) {
  
  var buffer = "", stack1, stack2;
  buffer += "\n            <li class=\"ebComponentList-item";
  foundHelper = helpers.selected;
  stack1 = foundHelper || depth0.selected;
  stack2 = helpers['if'];
  tmp1 = self.program(3, program3, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">\n                <a href=\"";
  foundHelper = helpers.url;
  stack1 = foundHelper || depth0.url;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "url", { hash: {} }); }
  buffer += escapeExpression(stack1) + "\" class=\"ebComponentList-link\" title=\"";
  foundHelper = helpers.title;
  stack1 = foundHelper || depth0.title;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "title", { hash: {} }); }
  buffer += escapeExpression(stack1) + "\">";
  foundHelper = helpers.name;
  stack1 = foundHelper || depth0.name;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "name", { hash: {} }); }
  buffer += escapeExpression(stack1) + "</a>\n            </li>\n            ";
  return buffer;}
function program3(depth0,data) {
  
  
  return " ebComponentList-item_selected";}

  buffer += "<div class=\"ebBreadcrumbs-item\">\n    <a href=\"";
  foundHelper = helpers.url;
  stack1 = foundHelper || depth0.url;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "url", { hash: {} }); }
  buffer += escapeExpression(stack1) + "\" class=\"ebBreadcrumbs-link\" title=\"";
  foundHelper = helpers.title;
  stack1 = foundHelper || depth0.title;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "title", { hash: {} }); }
  buffer += escapeExpression(stack1) + "\">";
  foundHelper = helpers.name;
  stack1 = foundHelper || depth0.name;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "name", { hash: {} }); }
  buffer += escapeExpression(stack1) + "</a>\n    ";
  foundHelper = helpers.children;
  stack1 = foundHelper || depth0.children;
  stack2 = helpers['if'];
  tmp1 = self.program(1, program1, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</div>";
  return buffer;});});

/*global define*/
define('widgets/Breadcrumb/BreadcrumbItem/BreadcrumbItemView',[
    'jscore/core',
    'template!./_breadcrumbItem.html'
], function (core, template) {
    

    var BreadcrumbItemView = core.View.extend({

        // TODO: Should be added to core.View and executed after render()
        afterRender: function () {
            this.link = this.getElement().find('.' + BreadcrumbItemView.EL_LINK);
            this.arrow = this.getElement().find('.' + BreadcrumbItemView.EL_ARROW);
        },

        getTemplate: function () {
            return template(this.options.template.breadcrumb);
        },

        getLink: function () {
            return this.link;
        },

        getArrow: function () {
            return this.arrow;
        }

    }, {
       EL_LINK: 'ebBreadcrumbs-link',
       EL_ARROW: 'ebBreadcrumbs-arrow'
    });

    return BreadcrumbItemView;

});
/*global define, setTimeout, clearTimeout*/
define('widgets/Breadcrumb/BreadcrumbItem/BreadcrumbItem',[
    'jscore/core',
    './BreadcrumbItemView',
    'widgets/utils/domUtils'
], function (core, View, domUtils) {
    

    /**
     * The BreadcrumbItem Widget is needed to create navigation parts for the Breadcrumb Widget.<br>
     * The BreadcrumbItem can be instantiated using the constructor BreadcrumbItem.
     *
     * The following options are accepted:
     *   <ul>
     *       <li>breadcrumb: an object used to create the Breadcrumb item.</li>
     *   </ul>
     *
     * @example
     *   var breadcrumbItem = new BreadcrumbItem({
     *     breadcrumb: {
     *       name: 'Level 1',
     *       url: '#url1',
     *       children: [
     *         {name: 'Item 1', url: '#item1', selected: true},
     *         {name: 'Item 2', url: '#item2', selected: false},
     *         {name: 'Item 3', url: '#item3'}
     *       ]
     *     }
     *   });
     *
     * @private
     * @class BreadcrumbItem
     */
    return core.Widget.extend({
        /*jshint validthis:true*/

        /**
         * Adds the Widget's element to the new parent element.
         *
         * @method attachTo
         * @param {Element} parent
         * @example
         *    widget.attachTo(this.getElement());
         */

        /**
         * Places the detached Widget back into the defined parent element.
         *
         * @method attach
         * @example
         *  widget.attach();
         */

        /**
         * Removes the Widget from the parent element, but does not destroy the Widget. DOM events will still work when Widget is attached back.
         *
         * @method detach
         * @example
         *  widget.detach();
         */

        /**
         * The init method is automatically called by the constructor when using the "new" operator. If an object with
         * key/value pairs was passed into the constructor then the options variable will have those key/value pairs.
         *
         * @method init
         * @param {Object} options
         * @private
         */
        init: function (options) {
            this.width = 0;
            this.options = options || [];
            this.view = new View({
                template: {breadcrumb: options.breadcrumb}
            });
        },

        /**
         * Overrides method from widget.
         * Executes every time, when added back to the screen.
         *
         * @method onViewReady
         * @private
         */
        onViewReady: function () {
            // TODO: not yet in jsCore. Will be removed in the future.
            this.view.afterRender();

            var $arrow = this.view.getArrow();
            if ($arrow) {
                var timeoutToOpen, timeoutToHide, isClicked = false, isOpened = false;
                this.getElement().addEventHandler('mouseover', function () {
                    clearTimeout(timeoutToHide);

                    if (!isOpened) {
                        timeoutToOpen = setTimeout(function () {
                            isOpened = true;
                            $arrow.trigger('focus');
                        }, 50);
                    }
                }, this);

                this.getElement().addEventHandler('mouseout', function () {
                    clearTimeout(timeoutToOpen);

                    if (!isClicked && isOpened) {
                        timeoutToHide = setTimeout(function () {
                            isOpened = false;
                            $arrow.trigger('blur');
                        }, 2000);
                    }
                }, this);

                $arrow.addEventHandler('click', function () {
                    clearTimeout(timeoutToHide);

                    isClicked = true;
                    if (!isOpened) {
                        isOpened = true;
                        $arrow.trigger('focus');
                    }
                }, this);

                $arrow.addEventHandler('blur', function () {
                    isClicked = false;
                    isOpened = false;
                });
            }

            setTimeout(function () {
                var elementDimensions = domUtils.getElementDimensions(this.getElement());
                this.width = elementDimensions.width;
            }.bind(this), 1);
        },

        /**
         * Returns width of the breadcrumb
         *
         * @method getWidth
         * @returns {int} Width of current breadcrumb
         */
        getWidth: function () {
            return this.width;
        }

    });

});
/*global define, setTimeout, clearTimeout, undefined, Error*/
define('widgets/Breadcrumb/Breadcrumb',[
    'widgets/main',
    './BreadcrumbView',
    './BreadcrumbItem/BreadcrumbItem',
    'widgets/utils/domUtils'
], function (core, View, BreadcrumbItem, domUtils) {
    

    // TODO: add to the description when will be part of container: "This widget is part of the container."
    /**
     * The Breadcrumb widget provides navigation through one app.<br>
     * The Breadcrumb can be instantiated using the constructor Breadcrumb.
     *
     * The following options are accepted:
     *   <ul>
     *       <li>breadcrumbs: an array of objects used to create the Breadcrumb widget.</li>
     *   </ul>
     *
     * @example
     *   var breadcrumb = new Breadcrumb({
     *     breadcrumbs: [
     *       {name: 'Level 1', url: '#level1'},
     *       {
     *         name: 'Level 2',
     *         url: '#level2',
     *         children: [
     *           {name: 'Item 1', url: '#item1', selected: true},
     *           {name: 'Item 2', url: '#item2', selected: false},
     *           {name: 'Item 3', url: '#item3'}
     *         ]
     *       },
     *       {name: 'Item 1', url: '#item1'}
     *     ]
     *   });
     *
     * @class Breadcrumb
     */
    return core.Widget.extend({
        /*jshint validthis:true*/

        View: View,

        /**
         * Adds the Widget's element to the new parent element.
         *
         * @method attachTo
         * @param {Element} parent
         * @example
         *    widget.attachTo(this.getElement());
         */

        /**
         * Places the detached Widget back into the defined parent element.
         *
         * @method attach
         * @example
         *  widget.attach();
         */

        /**
         * Removes the Widget from the parent element, but does not destroy the Widget. DOM events will still work when Widget is attached back.
         *
         * @method detach
         * @example
         *  widget.detach();
         */

        /**
         * The init method is automatically called by the constructor when using the "new" operator. If an object with
         * key/value pairs was passed into the constructor then the options variable will have those key/value pairs.
         *
         * @method init
         * @param {Object} options
         * @private
         */
        init: function (options) {
            this.breadcrumbItems = [];
            this.widthSize = 0;
            this.isResizeNeeded = false;
            this.dotsBreadcrumb = undefined;
        },

        /**
         * Overrides method from widget.
         * Executes every time, when added back to the screen.
         *
         * @method onViewReady
         * @private
         */
        onViewReady: function () {
            var breadcrumbObjects = this.options.breadcrumbs;

            if (breadcrumbObjects && breadcrumbObjects.length > 0) {
                breadcrumbObjects.forEach(function (breadcrumbObj) {
                    var breadcrumbItem = new BreadcrumbItem({
                        breadcrumb: breadcrumbObj
                    });

                    this.breadcrumbItems.push(breadcrumbItem);
                }, this);
            } else {
                throw new Error('A breadcrumb array should be defined for the Breadcrumb widget!');
            }

            redraw.call(this);

            domUtils.addWindowResizeHandler(function () {
                if (this.resizeTimeout) {
                    clearTimeout(this.resizeTimeout);
                }

                this.resizeTimeout = setTimeout(function () {
                    this.resize();
                }.bind(this), 50);
            }.bind(this), this);
        },

        /**
         * Resizes breadcrumbs
         *
         * @method resize
         */
        resize: function () {
            var elementDimensions = domUtils.getElementDimensions(this.getElement());
            if (this.isResizeNeeded || elementDimensions.width <= this.widthSize) {
                // detach all breadcrumbs
                this.breadcrumbItems.forEach(function (breadcrumbItem) {
                    breadcrumbItem.detach();
                }, this);

                if (!this.dotsBreadcrumb) {
                    // create 3 dots Breadcrumb
                    createDotsBreadcrumb.call(this);
                } else {
                    // detach 3 dots breadcrumb
                    this.dotsBreadcrumb.detach();
                }

                this.breadcrumbItems[0].attach();

                var index = getBreadcrumbsStartPoint.call(this, elementDimensions.width);
                if (index > 1) {
                    this.dotsBreadcrumb.attachTo(this.getElement());
                    this.isResizeNeeded = true;
                } else {
                    this.isResizeNeeded = false;
                }

                for (index; index < this.breadcrumbItems.length; index++) {
                    this.breadcrumbItems[index].attach();
                }
            }

            // remove from memory
            delete this.resizeTimeout;
        }
    });

    /* ++++++++++++++++++++++++++++++++++++++++++ PRIVATE METHODS ++++++++++++++++++++++++++++++++++++++++++ */

    /**
     * Attaches all breadcrumb items to the screen and executes resize function
     *
     * @method redraw
     * @private
     */
    function redraw () {
        this.breadcrumbItems.forEach(function (breadcrumbItem) {
            breadcrumbItem.attachTo(this.getElement());
        }, this);

        setTimeout(function () {
            this.breadcrumbItems.forEach(function (breadcrumbItem) {
                var itemDimensions = domUtils.getElementDimensions(breadcrumbItem.getElement());
                this.widthSize += itemDimensions.width;
            }, this);

            this.resize();
        }.bind(this), 1);
    }

    /**
     * Gets the first breadcrumb item index from the end which will be shown after 3 dots breadcrumb
     *
     * @method getBreadcrumbsStartPoint
     * @private
     * @param {int} parentWidth
     * @returns {int}
     */
    function getBreadcrumbsStartPoint (parentWidth) {
        if (parentWidth >= this.widthSize) {
            return 1;
        }

        var dotsBreadcrumbWidth = this.dotsBreadcrumb.getWidth();
        if (dotsBreadcrumbWidth === 0) {
            dotsBreadcrumbWidth = 30;
        }

        var currentWidth = this.breadcrumbItems[0].getWidth() + dotsBreadcrumbWidth;

        var breadcrumbIndex = this.breadcrumbItems.length;
        do {
            breadcrumbIndex--;
            currentWidth += this.breadcrumbItems[breadcrumbIndex].getWidth();
        } while (breadcrumbIndex > 1 && currentWidth <= parentWidth);

        // We should increase index, because item with breadcrumbIndex goes outside of parent width
        return breadcrumbIndex + 1;
    }

    /**
     * Creates 3 dots breadcrumb
     *
     * @method createDotsBreadcrumb
     * @private
     */
    function createDotsBreadcrumb () {
        this.dotsBreadcrumb = new BreadcrumbItem({
            breadcrumb: {
                name: '...',
                url: '#'
            }
        });

        this.dotsBreadcrumb.view.getLink().addEventHandler('click', function (event) {
            // detach all breadcrumbItems
            this.breadcrumbItems.forEach(function (breadcrumbItem) {
                breadcrumbItem.detach();
            }, this);
            // detach dotsBreadcrumb
            this.dotsBreadcrumb.detach();

            // attach all breadcrumbItems
            this.breadcrumbItems.forEach(function (breadcrumbItem) {
                breadcrumbItem.attach();
            }, this);

            this.isResizeNeeded = true;

            setTimeout(function () {
                this.resize();
            }.bind(this), 10000);

            domUtils.stopPropagation(event);
        }, this);
    }

});
define('widgets/Breadcrumb', ['widgets/Breadcrumb/Breadcrumb'], function (main) { return main; });
