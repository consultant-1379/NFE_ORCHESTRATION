
define('text!widgets/table/Cell/Cell.html',[],function () { return '<td></td>';});

define('widgets/table/Cell/CellView',[
	"jscore/core",
	"text!./Cell.html"
], function(core, template) {
	
	return core.View.extend({

		getTemplate: function() {
			return template;
		},
		
		getBody: function() {
			return this.getElement();
		},

		setValue: function(value) {
			this.getBody().setText(value);
		},

		getValue: function() {
			return this.getBody().getText();
		}
	});

});
/**
 *  Cell base for the table. Can be extended to provide custom functionality.
 *
 *  @class table.Cell
 */
define('widgets/table/Cell/Cell',[
    "jscore/core",
    "./CellView"
], function (core, View) {

    var Cell = core.Widget.extend({

        View: View,

        init: function () {
        },

        onViewReady: function () {
            var options = this.options,
                model = options.model,
                attribute = options.attribute;
            if (model !== undefined && attribute !== undefined) {
                var data = model.getAttribute(attribute);
                this.setValue(data);
            }

            this.onCellReady();
        },

        /**
         *    Called once the Cell has been fully initialized
         *
         *    @method onCellReady
         */
        onCellReady: function () {

        },

        /**
         *    Returns the row this cell belongs to
         *
         *    @method getRow
         *    @return {Row} row
         */
        getRow: function () {
            return this.options.row;
        },

        /**
         *    Returns the column this cell belongs to
         *
         *    @method getColumn
         *    @return {Column} column
         */
        getColumn: function () {
            return this.options.column;
        },

        /**
         *  The cell takes the model attribute value, and puts it into its view. This method should be overrided if the view is changed.
         *
         *    @method setValue
         *    @param {String} value
         */
        setValue: function (value) {
            this.view.setValue(value);
        },

        /**
         *  The cell returns the value of the cell from its view. This method should be overrided if the view is changed.
         *
         *    @method getValue
         *    @return {String} value
         */
        getValue: function () {
            return this.view.getValue();
        },

        /**
         *  Modifies the root of the cell to include a title for tooltips
         *
         *    @method setTooltip
         *    @private
         *    @param {String} value
         */
        setTooltip: function (value) {
            this.view.getElement().setAttribute("title", value);
        },

        /**
         *    Returns the event bus for the table that all components in the table can access and subscribe to
         *
         *    @method getEventBus
         *    @return {EventBus} eventBus
         */
        getEventBus: function () {
            return this.options.eventBus;
        }

        /**
         * Removes the cell root Element from the DOM.
         *
         * @method destroy
         */

        /**
         * To create an Cell child class call extend providing the class definition.
         *
         * @method extend
         * @static
         * @param {Object} definition
         * @return {Cell} cell
         * @example
         * Cell.extend({
    *     onCellReady: function() {
    *     }
    * });
         */


    });

    return Cell;

});
define('widgets/table/Cell', ['widgets/table/Cell/Cell'], function (main) { return main; });
