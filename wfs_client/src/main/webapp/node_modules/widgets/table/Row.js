
define('text!widgets/table/Row/Row.html',[],function () { return '<tr class="ebTableRow"></tr>\n';});

define('widgets/table/Row/RowView',[
	"jscore/core",
	"text!./Row.html"
], function(core, template) {
	
	return core.View.extend({

		getTemplate: function() {
			return template;
		},
		
		getBody: function() {
			return this.getElement();
		},
		highlight: function() {
            this.getBody().setModifier('highlighted');
		},

		unhighlight: function() {
            this.getBody().removeModifier('highlighted');
        }
	});

});
/**
 *  Row base for the table. Can be extended to provide custom functionality.
 *
 *  @class table.Row
 */
define('widgets/table/Row/Row',[
    "jscore/core",
    "./RowView"
], function (core, View) {

    var Row = core.Widget.extend({

        View: View,

        init: function () {
            this._cells = [];
            this._highlighted = false;
        },

        onViewReady: function () {
            this.onRowReady(this.options);
        },

        /**
         *    Called once the Row has been fully initialized
         *
         *    @method onRowReady
         */
        onRowReady: function () {

        },

        /**
         *   Gets the cell instances associated with this row
         *
         *   @method getCells
         *   @return {Array<Cell>} cells
         */
        getCells: function () {
            return this._cells;
        },

        /**
         *   Gets the model instance associated with this row
         *
         *   @method getData
         *   @return {Model} model
         */
        getData: function () {
            return this.options.data;
        },

        /**
         *   Highlights the row, unless the highlight variable passed is set to false.
         *
         *   @method highlight
         *   @param {Boolean} [highlight]
         */
        highlight: function (highlight) {
            highlight = (highlight === undefined) ? true : highlight;
            this._highlighted = highlight;
            if (highlight) {
                this.view.highlight();
            } else {
                this.unhighlight();
            }
        },

        /**
         *   Removes the highlight from the row.
         *
         *   @method unhighlight
         */
        unhighlight: function () {
            this._highlighted = false;
            this.view.unhighlight();
        },

        /**
         *   Returns true if the row is highlighted, false otherwise.
         *
         *   @method isHighlighted
         *   @return {Boolean} highlighted
         */
        isHighlighted: function () {
            return this._highlighted;
        },


        /**
         *    Returns the event bus for the table that all components in the table can access
         *
         *    @method getEventBus
         *    @return {EventBus} eventBus
         */
        getEventBus: function () {
            return this.options.eventBus;
        },

        /**
         * Destroys the row widget. By default the model for the row will be removed
         * from the collection unless removeData is set to false.
         *
         * @method destroy
         * @param {Boolean} [removeData]
         */
        destroy: function () {
            for (var i = 0; i < this._cells.length; i++) {
                this._cells[i].destroy();
                this._cells[i] = undefined;
            }

            for (var event in this.tableCellBindEvents) {
                this.options.data.removeEventHandler("change:" + event, this.tableCellBindEvents[event]);
            }

            core.Widget.prototype.destroy.call(this);
            this.getEventBus().publish("rowdestroy", this);

        },

        /**
         *   Attaches the passed cell to this row
         *
         *   @method attachCell
         *   @param {Cell} cell
         */
        attachCell: function (cellWidget) {
            cellWidget.attachTo(this.view.getBody());
            this._cells.push(cellWidget);
        }

    });

    /**
     * To create an Row child class call extend providing the class definition.
     *
     * @method extend
     * @static
     * @param {Object} definition
     * @return {Row} row
     * @example
     * Row.extend({
    *     onRowReady: function() {
    *     }
    * });
     */

    return Row;

});
define('widgets/table/Row', ['widgets/table/Row/Row'], function (main) { return main; });
