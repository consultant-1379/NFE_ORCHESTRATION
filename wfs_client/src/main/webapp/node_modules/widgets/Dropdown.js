
define('text!widgets/Dropdown/_dropdown.html',[],function () { return '<div class="ebDropdown">\n    <button type="button" class="ebDropdown-Header">\n        <span class="ebDropdown-caption">Actions</span>\n        <span class="ebDropdown-iconHolder"><i class="ebIcon ebIcon_small ebIcon_downArrow_10px"></i></span>\n    </button>\n    <div class="ebDropdown-list"></div>\n</div>';});

/*global define*/
define('widgets/Dropdown/DropdownView',[
    "jscore/core",
    "text!./_dropdown.html"
], function (core, template) {
    

    var DropdownView = core.View.extend({

        // TODO: Should be added to core.View and executed after render()
        afterRender: function () {
            this.caption = this.getElement().find('.' + DropdownView.EL_CAPTION);
            this.button = this.getElement().find('.' + DropdownView.EL_HEADER);
            this.list = this.getElement().find('.' + DropdownView.EL_LIST);
        },

        getTemplate: function () {
            return template;
        },

        getRoot: function () {
            return this.getElement();
        },

        getCaption: function () {
            return this.caption;
        },

        getButton: function () {
            return this.button;
        },

        getList: function () {
            return this.list;
        }

    }, {
        'EL_CAPTION': 'ebDropdown-caption',
        'EL_HEADER': 'ebDropdown-Header',
        'EL_LIST': 'ebDropdown-list'
    });

    return DropdownView;
});
define('text!widgets/ComponentList/_componentList.html',[],function () { return '<div class="ebComponentList"></div>';});

define('text!widgets/ComponentList/_componentListItem.html',[],function () { return '<div class="ebComponentList-item"></div>';});

define('text!widgets/ComponentList/_componentListSeparator.html',[],function () { return '<div class="ebComponentList-separator"></div>';});

/*global define*/
define('widgets/ComponentList/ComponentListView',[
    'jscore/core',
    'text!./_componentList.html',
    'text!./_componentListItem.html',
    'text!./_componentListSeparator.html'
], function (core, template, listItemTemplate, listSeparatorTemplate) {
    

    return core.View.extend({

        getTemplate: function () {
            return template;
        },

        // TODO: Should be added to core.View and executed after render()
        afterRender: function () {},

        addItem: function (itemObj) {
            var $itemEl = core.Element.parse(listItemTemplate);
            $itemEl.setText(itemObj.name);
            $itemEl.setAttribute('title', itemObj.title ? itemObj.title : itemObj.name);

            this.getElement().append($itemEl);
            return $itemEl;
        },

        addSeparator: function () {
            this.getElement().append(core.Element.parse(listSeparatorTemplate));
        }

    });

});
/*global define, Object*/
define('widgets/ComponentList/ComponentList',[
    'widgets/main',
    './ComponentListView'
], function (core, View) {
    

    /**
     * The ComponentList class uses the Ericsson brand assets.<br>
     * The ComponentList can be instantiated using the constructor ComponentList.
     *
     * <strong>Constructor:</strong>
     *   <ul>
     *     <li>ComponentList(Object options)</li>
     *   </ul>
     *
     * <strong>Events:</strong>
     *   <ul>
     *     <li>itemSelected: this event is triggered when value is selected in the ComponentList</li>
     *   </ul>
     *
     * <strong>Options:</strong>
     *   <ul>
     *       <li>items: an array used as a list of available items in the ComponentList</li>
     *   </ul>
     *
     * @private
     * @class ComponentList
     */
    return core.Widget.extend({
        /*jshint validthis:true */

        // constants
        TYPE_SEPARATOR: 'separator',

        View: View,

        /**
         * The init method is automatically called by the constructor when using the "new" operator. If an object with
         * key/value pairs was passed into the constructor then the options variable will have those key/value pairs.
         *
         * @method init
         * @param {Object} options
         * @private
         */
        init: function (options) {
            this.selectedItem = {};
        },

        /**
         * Overrides method from widget.
         * Executes every time, when added back to the screen.
         *
         * @method onViewReady
         * @private
         */
        onViewReady: function () {
            // TODO: not yet in jsCore. Will be removed in the future.
            this.view.afterRender();

            if (this.options.items !== undefined) {
                this.setItems(this.options.items);
            }

            this.getElement().addEventHandler('itemSelected', function () {
                this.trigger('itemSelected');
            }, this);
        },

        /**
         * Gets values from the ComponentList
         *
         * @method getItems
         * @return {Array} items
         */
        getItems: function () {
            return this.items;
        },

        /**
         * Sets values to the ComponentList
         *
         * @method setItems
         * @param {Array} items
         */
        setItems: function (items) {
            this.getElement().children().forEach(function (child) {
                child.remove();
            });

            if (items.length === 0) {
                return;
            }
            this.items = items;

            items.forEach(function (itemObj, index) {
                if (itemObj.type === this.TYPE_SEPARATOR) {
                    this.view.addSeparator();
                } else {
                    var $item = this.view.addItem(itemObj);
                    $item.addEventHandler('click', function () {
                        _onListItemClicked.call(this, index);
                    }, this);
                }
            }, this);
        },

        /**
         * Returns current selected item
         *
         * @method getSelectedValue
         * @return {String}
         */
        getSelectedValue: function () {
            return this.selectedItem;
        }

        /**
         * Add event handle for the ComponentList
         *
         * @method addEventHandler
         * @param {String} action
         * @param {Function} callback
         * @param {Object} context
         */

    });

    /* ++++++++++++++++++++++++++++++++++++++++++ PRIVATE METHODS ++++++++++++++++++++++++++++++++++++++++++ */

    /**
     * An event which is executed when on the list item is clicked
     *
     * @method _onListItemClicked
     * @param {int} index
     * @private
     */
    function _onListItemClicked (index) {
        this.selectedItem = this.items[index];
        if (this.selectedItem !== null) {
            this.trigger('itemSelected');
        }
    }


});

define('widgets/ComponentList', ['widgets/ComponentList/ComponentList'], function (main) { return main; });

/*global define*/
define('widgets/Dropdown/Dropdown',[
    'widgets/main',
    './DropdownView',
    'widgets/ComponentList'
], function (core, View, ComponentList) {
    

    /**
     * The Dropdown class uses the Ericsson brand assets.<br>
     * The Dropdown can be instantiated using the constructor Dropdown.
     *
     * <strong>Constructor:</strong>
     *   <ul>
     *     <li>Dropdown(Object options)</li>
     *   </ul>
     *
     * <strong>Events:</strong>
     *   <ul>
     *     <li>change: this event is triggered when value is changed in the Dropdown</li>
     *     <li>focus: this event is triggered when the Dropdown is focused</li>
     *     <li>click: this event is triggered when user clicks on the Dropdown</li>
     *   </ul>
     *
     * <strong>Options:</strong>
     *   <ul>
     *       <li>caption: a string used as a dropdown caption</li>
     *       <li>items: an array used as a list of actions in the Dropdown</li>
     *       <li>enabled: boolean indicating whether dropdown should be enabled. Default is true.</li>
     *       <li>modifiers: an array used to define modifiers for the Dropdown.
     *       <a name="modifierAvailableList"></a>
     *          <br>E.g: modifiers:[{name: 'foo'}, {name: 'bar', value:'barVal'}]
     *          <ul style="padding-left: 15px;">
     *              <li>disabled: disabled (Asset Library)</li>
     *          </ul>
     *       </li>
     *   </ul>
     *
     * @class Dropdown
     */
    return core.Widget.extend({
        /*jshint validthis:true */

        View: View,

        /**
         * Overrides method from widget.
         * Executes every time, when added back to the screen.
         *
         * @method onViewReady
         * @private
         */
        onViewReady: function () {
            // TODO: not yet in jsCore. Will be removed in the future.
            this.view.afterRender();

            if (this.options.enabled === false) {
                this.disable();
            } else {
                this.enable();
            }

            this.setCaption(this.options.caption || '');
            this.setItems(this.options.items || []);
            this.setModifiers(this.options.modifiers || []);

            this.getElement().addEventHandler('change', function () {
                this.trigger('change');
            }, this);

            this.view.getButton().addEventHandler('focus', function () {
                this.trigger('focus');
            }, this);

            this.view.getButton().addEventHandler('click', function () {
                this.trigger('click');
            }, this);
        },

        /**
         * Sets caption for the Dropdown.
         *
         * @method setCaption
         * @param {String} caption
         */
        setCaption: function (caption) {
            this.view.getCaption().setText(caption);
        },

        /**
         * Sets actions for the Dropdown. If actions array is empty than dropdown is disabled.
         *
         * @method setActions
         * @param {Object} actions e.g. <b>{</b> 'Message': function(){alert('Foo')} <b>}</b>
         */
        setItems: function (items) {
            this.items = items;
            if (items.length > 0) {
                if (this.componentList === undefined) {
                    this.componentList = new ComponentList({
                        items: items
                    });
                    this.componentList.attachTo(this.view.getList());
                    this.componentList.addEventHandler('itemSelected', _onComponentListClick, this);
                } else {
                    this.componentList.setItems(items);
                }
            } else {
                this.disable();
            }
        },

        /**
         * Enables the Dropdown.
         *
         * @method enable
         */
        enable: function () {
            this.getElement().removeModifier('disabled');
            this.view.getButton().setAttribute('disabled', false);
            this.view.getButton().addEventHandler('click', _onDropdownClick, this);
        },

        /**
         * Disables the Dropdown.
         *
         * @method disable
         */
        disable: function () {
            this.getElement().setModifier('disabled');
            this.view.getButton().setAttribute('disabled', true);
            this.view.getButton().removeEventHandler('click');
        },

        /**
         * Add a single modifier to the widget.<br>
         * <a href="#modifierAvailableList">see available modifiers</a>
         *
         * @method setModifier
         * @param {String} key
         * @param {String|boolean|int} value
         */
        setModifier: function (key, value) {
            this.getElement().setModifier(key, value);
        },


        /**
         * A methods, which allows to define a list of modifiers to the widget.<br>
         * <a href="#modifierAvailableList">see available modifiers</a>
         *
         * @param {Array} modifiers Contains objects {name: {String}[, value: {String}]}
         */
        setModifiers: function (modifiers) {
            modifiers.forEach(function (modifier) {
                this.setModifier(modifier.name, modifier.value);
            }, this);
        },
        /**
         * Remove the modifier 'key' from the widget modifiers.
         *
         * @method removeModifier
         * @param {String} key
         */
        removeModifier: function (key) {
            this.getElement().removeModifier(key);
        }

        /**
         * Adds the Widget's element to the new parent element.
         *
         * @method attachTo
         * @param {Element} parent
         * @example
         *    widget.attachTo(this.getElement());
         */

        /**
         * Places the detached Widget back into the defined parent element.
         *
         * @method attach
         * @example
         *  widget.attach();
         */

        /**
         * Removes the Widget from the parent element, but does not destroy the Widget. DOM events will still work when Widget is attached back.
         *
         * @method detach
         * @example
         *  widget.detach();
         */

        /**
         * Add event handler to the Dropdown.
         *
         * @method addEventHandler
         * @param {String} action  (change|focus|click)
         * @param {Function} callback
         * @param {Object} context
         * @return {String} eventID
         */

        /**
         * Remove the event handler from the Dropdown.
         *
         * @method removeEventHandler
         * @param {String} eventID
         */

    });

    /* ++++++++++++++++++++++++++++++++++++++++++ PRIVATE METHODS ++++++++++++++++++++++++++++++++++++++++++ */

    /**
     * An event which is executed when clicked on the Dropdown
     *
     * @method _onDropdownClick
     * @private
     */
    function _onDropdownClick () {
        this.view.getButton().trigger('focus');
    }

    /**
     * An event which is executed when an action is selected from the ComponentList
     *
     * @method _onComponentListClick
     * @private
     */
    function _onComponentListClick () {
        var selectedItem = this.componentList.getSelectedValue();
        if (selectedItem) {
            selectedItem.action();
            this.getElement().trigger('change');
        }
    }

});

define('widgets/Dropdown', ['widgets/Dropdown/Dropdown'], function (main) { return main; });
