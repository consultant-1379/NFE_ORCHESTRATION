/*global define, window*/
define([
    'jscore/base/jquery',
    'jscore/ext/dom'
], function ($, dom) {
    

    /**
     * The domUtils used to work with native DOM elements.
     *
     * @class domUtils
     * @namespace utils
     */
    return {
        /**
         * Adds "resize" event listener to window element.
         *
         * @method addWindowResizeHandler
         * @param {Function} callBack The function which will be called, when resize is triggered.
         * @param {Object} [context] Optional
         */
        addWindowResizeHandler: function (callBack, context) {
            window.addEventListener('resize', callBack, context);
        },

        /**
         * Removes "resize" event listener from window element.
         *
         * @method removeWindowResizeHandler
         * @param {Function} callBack The function which will be called, when resize is triggered.
         * @param {Object} [context] Optional
         */
        removeWindowResizeHandler: function (callBack, context) {
            window.removeEventListener('resize', callBack, context);
        },

        /**
         * Returns window width and height of the browser window
         *
         * @method getWindowDimensions
         * @returns {{width: {int}, height: {int}}}
         */
        getWindowDimensions: function () {
            return {
                width: window.innerWidth,
                height: window.innerHeight
            };
        },

        /**
         * Returns window width and height of the element
         *
         * @method getElementDimensions
         * @param {core.Element} element
         * @returns {{width: {int}, height: {int}}}
         */
        getElementDimensions: function (element) {
            var nativeElt = element._getHTMLElement();
            return {
                width: nativeElt.clientWidth,
                height: nativeElt.clientHeight
            };
        },

        /**
         * Returns a list of core.Element objects found in the element
         *
         * @method findAll
         * @param {string} selector
         * @param {core.Element} element
         * @returns {Array} A list of core.Element objects
         */
        findAll: function (selector, element) {
            var $el;
            if (element) {
                $el = $($.find(selector, element._getHTMLElement()));
            }
            var results = [];
            $el.each(function () {
                var $value = $(this);
                var result = $value.data('element');

                if (!result) {
                    results.push(dom.Element.wrap(this));
                    $value.data('element', result);
                } else {
                    results.push(result);
                }
            });
            return results;
        },

        /**
         * Stops propagation according to provided event
         *
         * @method stopPropagation
         * @param {Object} event Native event
         */
        stopPropagation: function (event) {
            event.preventDefault();
            event.originalEvent.stopPropagation();
        }

    };

});