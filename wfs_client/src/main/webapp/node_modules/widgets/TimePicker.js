
define('text!widgets/TimePicker/_timePicker.html',[],function () { return '<div data-namespace="ebTimePicker"></div>';});

/*global define*/
define('widgets/TimePicker/TimePickerView',[
    'jscore/core',
    'text!./_timePicker.html'
], function (core, template) {
    

    return core.View.extend({

        getTemplate: function () {
            return template;
        },

        getRoot: function () {
            return this.getElement();
        }

    });

});

define('text!widgets/Spinner/_spinner.html',[],function () { return '<table data-namespace="ebSpinner">\n    <tr>\n        <td data-name="label"></td>\n        <td class="ebSpinner-holder">\n            <div data-name="up" class="ebSpinner-iconUpHolder">\n                <i class="ebIcon ebIcon_upArrow ebIcon_interactive"></i>\n            </div>\n            <div class="ebSpinner-inputHolder">\n                <input type="text" data-name="input" class="ebInput ebInput_miniW ebInput_noMargin ebInput_txtCenter" value="20"/>\n            </div>\n            <div data-name="down" class="ebSpinner-iconDownHolder">\n                <i class="ebIcon ebIcon_downArrow ebIcon_interactive"></i>\n            </div>\n        </td>\n        <td data-name="value"></td>\n    </tr>\n</table>';});

/*global define*/
define('widgets/Spinner/SpinnerView',[
    'jscore/core',
    'text!./_spinner.html',
    'widgets/utils/dataNameUtils'
], function (core, template, dataNameUtils) {
    

    var SpinnerView = core.View.extend({

        getTemplate: function () {
            return dataNameUtils.translate(null, template, this);
        },

        // TODO: Should be added to core.View and executed after render()
        afterRender: function () {
            this.ebInput = this.getElement().find('.' + SpinnerView.EL_INPUT_CLASS);
        },

        getRoot: function () {
            return this.getElement();
        },

        getPrefix: function () {
            return this[SpinnerView.EL_PREFIX];
        },

        getPostfix: function () {
            return this[SpinnerView.EL_POSTFIX];
        },

        getUpButton: function () {
            return this[SpinnerView.EL_UP_BUTTON];
        },

        getDownButton: function () {
            return this[SpinnerView.EL_DOWN_BUTTON];
        },

        getInput: function () {
            return this[SpinnerView.EL_INPUT];
        },

        getEbInput: function () {
            return this.ebInput;
        }

    }, {
        'EL_PREFIX': 'label',
        'EL_POSTFIX': 'value',
        'EL_UP_BUTTON': 'up',
        'EL_DOWN_BUTTON': 'down',
        'EL_INPUT': 'input',
        'EL_INPUT_CLASS': 'ebInput'
    });

    return SpinnerView;

});
/*global define, setTimeout, clearTimeout, undefined, isNaN, String*/
define('widgets/Spinner/Spinner',[
    'widgets/main',
    './SpinnerView',
    'widgets/utils/parserUtils'
], function (core, View, parserUtils) {
    

    /**
     * The Spinner class uses the Ericsson brand assets.<br>
     * The Spinner can be instantiated using the constructor Spinner.
     *
     * The following options are accepted:
     *   <ul>
     *       <li>value:     an integer used as a default value for the Spinner. Default is min value or 0.</li>
     *       <li>min:       an integer used as a min value for the Spinner. Default is 0.</li>
     *       <li>max:       an integer used as a max value for the Spinner.</li>
     *       <li>prefix:    a string used as a label for the Spinner.</li>
     *       <li>postfix:   a string used as a value type for the Spinner.</li>
     *       <li>inputSize: a string used to define size for the Spinner input field.</li>
     *   </ul>
     *
     * @class Spinner
     */
    return core.Widget.extend({

        /*jshint validthis:true*/

        View: View,

        /**
         * Adds the Widget's element to the new parent element.
         *
         * @method attachTo
         * @param {Element} parent
         * @example
         *    widget.attachTo(this.getElement());
         */

        /**
         * Places the detached Widget back into the defined parent element.
         *
         * @method attach
         * @example
         *  widget.attach();
         */

        /**
         * Removes the Widget from the parent element, but does not destroy the Widget. DOM events will still work when Widget is attached back.
         *
         * @method detach
         * @example
         *  widget.detach();
         */

        /**
         * The init method is automatically called by the constructor when using the "new" operator. If an object with
         * key/value pairs was passed into the constructor then the options variable will have those key/value pairs.
         *
         * @method init
         * @private
         * @param {Object} options
         */
        init: function (options) {
            this.options = options || {};

            this.minDelay = 100;
            this.maxDelay = 400;
            this.delayStep = 50;
        },

        /**
         * Overrides method from widget.
         * Executes every time, when added back to the screen.
         *
         * @method onViewReady
         * @private
         */
        onViewReady: function () {
            // TODO: not yet in jsCore. Will be removed in the future.
            this.view.afterRender();

            // Always start with minimal value
            if (this.options.min === undefined) {
                this.options.min = 0;
            }
            // If not defined default value, start with minimum value
            if (this.options.value === undefined) {
                this.options.value = this.options.min;
            }

            this.setValue(this.options.value);
            this.setPrefix(this.options.prefix || '');
            this.setPostfix(this.options.postfix || '');
            this.setInputSize(this.options.inputSize || 'miniW');

            this.view.getUpButton().addEventHandler('mousedown', startAutoIncrement, this);
            this.view.getUpButton().addEventHandler('mouseup', endAutoIncrement, this);
            this.view.getUpButton().addEventHandler('mouseout', endAutoIncrement, this);
            this.view.getDownButton().addEventHandler('mousedown', startAutoDecrement, this);
            this.view.getDownButton().addEventHandler('mouseup', endAutoDecrement, this);
            this.view.getDownButton().addEventHandler('mouseout', endAutoDecrement, this);

            this.view.getInput().addEventHandler('keypress', handleKeyPress, this);
            this.view.getInput().addEventHandler('keyup', handleKeyUp, this);
        },

        /**
         * Sets the text that appears in front of Spinner input
         *
         * @method setPrefix
         * @param {String} text Text in front of Spinner input
         */
        setPrefix: function (text) {
            if (text && text.trim() !== '') {
                var prefix = this.view.getPrefix();
                prefix.setStyle('display', 'table-cell');
                prefix.setText(text);
            }
        },

        /**
         * Sets the text that appears in behind of Spinner input
         *
         * @method setPostfix
         * @param {String} text Text behind Spinner input
         */
        setPostfix: function (text) {
            if (text && text.trim() !== '') {
                var postfix = this.view.getPostfix();
                postfix.setStyle('display', 'table-cell');
                postfix.setText(text);
            }
        },

        /**
         * Sets the value that will be visible in Spinner
         *
         * @method setValue
         * @param {int|String} value Integer or String containing Integer
         */
        setValue: function (value) {
            if (value !== undefined && value !== null) {
                if (value instanceof String || typeof(value) === 'string') {
                    if (value instanceof String) {
                        value = value.toString();
                    }

                    var num = value === '' ? 0 : parserUtils.parseInt(value);
                    if (!isNaN(num)) {
                        this.value = getInRange.call(this, num);
                        update.call(this);
                    }
                } else if (/[0-9]|-/.test(value)) {
                    this.value = getInRange.call(this, value);
                    update.call(this);
                }
            }
        },

        /**
         * Returns the value that is presented in Spinner input field
         *
         * @method getValue
         * @return {int}
         */
        getValue: function () {
            return this.value;
        },

        /**
         * A method which allows to define input field size
         *
         * @param {string} inputSize Can be selected from available sizes: ['miniW', 'smallW', 'longW', 'xLongW']
         */
        setInputSize: function (inputSize) {
            this.view.getEbInput().setModifier(inputSize);
        }

    });

    /* ++++++++++++++++++++++++++++++++++++++++++ PRIVATE METHODS ++++++++++++++++++++++++++++++++++++++++++ */

    function inRange(value) {
        var min = this.options.min;
        var max = this.options.max;

        if (max === undefined) {
            return value >= min;
        } else {
            return value <= max && value >= min;
        }
    }

    function getInRange(value) {
        value = value > this.options.max ? this.options.max : value;
        return value < this.options.min ? this.options.min : value;
    }

    function handleKeyPress(event) {
        var key = String.fromCharCode(event.which);
        if (event.which < 47  || (event.which >= 112 && event.which <= 123)|| event.ctrlKey) {
            // Since Firefox is very restrictive on these keys, we have to manually allow for special keys like backspace
            // Here is good reading about madness about keycodes http://unixpapa.com/js/key.html
            // + more info on keycodes http://www.webonweboff.com/tips/js/event_key_codes.aspx
            return false;
        }

        // Regular expression to test if provided value is integer (can be also negative)
        var isInteger = /-?[0-9]/;
        return isInteger.test(key);
    }

    function handleKeyUp() {
        var inputValue = this.view.getInput().getValue(),
            value = 0;
        if (inputValue !== '') {
            value = parserUtils.parseInt(inputValue);
        }

        if (!inRange.call(this, value)) {
            // Roll back value to old one
            update.call(this);
        } else {
            this.value = value;
            if (inputValue === '') {
                update.call(this);
            }
            applyModifiers.call(this);
        }
    }

    function autoIncrement() {
        clearTimeout(this.autoIncrementTimeout);

        if (increment.call(this)) {
            if (this.autoIncrementDelay >= this.minDelay) {
                this.autoIncrementDelay -= this.delayStep;
            }

            this.autoIncrementTimeout = setTimeout(
                autoIncrement.bind(this),
                this.autoIncrementDelay
            );
        }
    }

    function startAutoIncrement() {
        this.autoIncrementDelay = this.maxDelay;
        this.autoIncrementTimeout = setTimeout(
            autoIncrement.bind(this),
            this.autoIncrementDelay
        );
    }

    function endAutoIncrement() {
        if (this.autoIncrementTimeout) {
            clearTimeout(this.autoIncrementTimeout);
            increment.call(this);

            // this.autoIncrementTimeout should be removed fully, otherwise onMouseHover will continue to increase value
            delete this.autoIncrementTimeout;
        }
    }

    function increment() {
        if (inRange.call(this, this.value + 1)) {
            this.value++;
            update.call(this);
            return true;
        }
        return false;
    }

    function autoDecrement() {
        clearTimeout(this.autoDecrementTimeout);

        if (decrement.call(this)) {
            if (this.autoDecrementDelay >= this.minDelay) {
                this.autoDecrementDelay -= this.delayStep;
            }

            this.autoDecrementTimeout = setTimeout(
                autoDecrement.bind(this),
                this.autoDecrementDelay
            );
        }
    }

    function startAutoDecrement() {
        this.autoDecrementDelay = this.maxDelay;
        this.autoDecrementTimeout = setTimeout(
            autoDecrement.bind(this),
            this.autoDecrementDelay
        );
    }

    function endAutoDecrement() {
        if (this.autoDecrementTimeout) {
            clearTimeout(this.autoDecrementTimeout);
            decrement.call(this);

            // this.autoDecrementTimeout should be removed fully, otherwise onMouseHover will continue to decrease value
            delete this.autoDecrementTimeout;
        }
    }

    function decrement() {
        if (inRange.call(this, this.value - 1)) {
            this.value--;
            update.call(this);
            return true;
        }
        return false;
    }

    function update() {
        // Set input value
        this.view.getInput().setValue(this.value);

        // Enable/Disable up/down buttons
        applyModifiers.call(this);
    }

    function applyModifiers() {
        // Up button
        if (inRange.call(this, this.value + 1)) {
            this.view.getUpButton().find('.ebIcon').removeModifier('disabled');
        } else {
            this.view.getUpButton().find('.ebIcon').setModifier('disabled');
        }

        // Down button
        if (inRange.call(this, this.value - 1)) {
            this.view.getDownButton().find('.ebIcon').removeModifier('disabled');
        } else {
            this.view.getDownButton().find('.ebIcon').setModifier('disabled');
        }
    }
});
define('widgets/Spinner', ['widgets/Spinner/Spinner'], function (main) { return main; });

/*global define*/
define('widgets/TimePicker/TimePicker',[
    'widgets/main',
    './TimePickerView',
    'widgets/Spinner'
], function (core, View, Spinner) {
    

    /**
     * The TimePicker class uses the Ericsson brand assets.<br>
     * The TimePicker can be instantiated using the constructor TimePicker.
     *
     * The following options are accepted:
     *   <ul>
     *       <li>hours: an integer used as a defined hours for TimePicker. Default is 0.</li>
     *       <li>minutes: an integer used as a defined minutes for TimePicker. Default is 0.</li>
     *       <li>seconds: an integer used as a defined seconds for TimePicker. Default is 0.</li>
     *   </ul>
     *
     * @class TimePicker
     */
    return core.Widget.extend({

        View: View,

        /**
         * Adds the Widget's element to the new parent element.
         *
         * @method attachTo
         * @param {Element} parent
         * @example
         *    widget.attachTo(this.getElement());
         */

        /**
         * Places the detached Widget back into the defined parent element.
         *
         * @method attach
         * @example
         *  widget.attach();
         */

        /**
         * Removes the Widget from the parent element, but does not destroy the Widget. DOM events will still work when Widget is attached back.
         *
         * @method detach
         * @example
         *  widget.detach();
         */

        /**
         * The init method is automatically called by the constructor when using the "new" operator. If an object with
         * key/value pairs was passed into the constructor then the options variable will have those key/value pairs.
         *
         * @method init
         * @private
         * @param {Object} options
         */
        init: function (options) {
            options = options || {};

            this.hoursSpinner = new Spinner({
                value: options.hours || 0,
                min: 0,
                max: 23,
                postfix: 'h'
            });

            this.minutesSpinner = new Spinner({
                value: options.minutes || 0,
                min: 0,
                max: 59,
                postfix: 'm'
            });

            this.secondsSpinner = new Spinner({
                value: options.seconds || 0,
                min: 0,
                max: 59,
                postfix: 's'
            });
        },

        /**
         * Overrides method from widget.
         * Executes every time, when added back to the screen.
         *
         * @method onViewReady
         * @private
         */
        onViewReady: function () {
            this.getElement().append(this.hoursSpinner.getElement());
            this.getElement().append(this.minutesSpinner.getElement());
            this.getElement().append(this.secondsSpinner.getElement());
        },

        /**
         * Sets value to the TimePicker
         *
         * @method setValue
         * @param {int} hours
         * @param {int} minutes
         * @param {int} seconds
         */
        setValue: function (hours, minutes, seconds) {
            this.hoursSpinner.setValue(hours);
            this.minutesSpinner.setValue(minutes);
            this.secondsSpinner.setValue(seconds);
        },

        /**
         * Returns the value that is presented in the TimePicker
         *
         * @method getValue
         * @return {object} Object representing time in the TimePicker {hours: int, minutes: int, seconds: int}
         */
        getValue: function () {
            return {
                hours: this.hoursSpinner.getValue(),
                minutes: this.minutesSpinner.getValue(),
                seconds: this.secondsSpinner.getValue()
            };
        }

    });

});

define('widgets/TimePicker', ['widgets/TimePicker/TimePicker'], function (main) { return main; });
