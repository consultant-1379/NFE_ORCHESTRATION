
define('text!widgets/ComponentList/_componentList.html',[],function () { return '<div class="ebComponentList"></div>';});

define('text!widgets/ComponentList/_componentListItem.html',[],function () { return '<div class="ebComponentList-item"></div>';});

define('text!widgets/ComponentList/_componentListSeparator.html',[],function () { return '<div class="ebComponentList-separator"></div>';});

/*global define*/
define('widgets/ComponentList/ComponentListView',[
    'jscore/core',
    'text!./_componentList.html',
    'text!./_componentListItem.html',
    'text!./_componentListSeparator.html'
], function (core, template, listItemTemplate, listSeparatorTemplate) {
    

    return core.View.extend({

        getTemplate: function () {
            return template;
        },

        // TODO: Should be added to core.View and executed after render()
        afterRender: function () {},

        addItem: function (itemObj) {
            var $itemEl = core.Element.parse(listItemTemplate);
            $itemEl.setText(itemObj.name);
            $itemEl.setAttribute('title', itemObj.title ? itemObj.title : itemObj.name);

            this.getElement().append($itemEl);
            return $itemEl;
        },

        addSeparator: function () {
            this.getElement().append(core.Element.parse(listSeparatorTemplate));
        }

    });

});
/*global define, Object*/
define('widgets/ComponentList/ComponentList',[
    'widgets/main',
    './ComponentListView'
], function (core, View) {
    

    /**
     * The ComponentList class uses the Ericsson brand assets.<br>
     * The ComponentList can be instantiated using the constructor ComponentList.
     *
     * <strong>Constructor:</strong>
     *   <ul>
     *     <li>ComponentList(Object options)</li>
     *   </ul>
     *
     * <strong>Events:</strong>
     *   <ul>
     *     <li>itemSelected: this event is triggered when value is selected in the ComponentList</li>
     *   </ul>
     *
     * <strong>Options:</strong>
     *   <ul>
     *       <li>items: an array used as a list of available items in the ComponentList</li>
     *   </ul>
     *
     * @private
     * @class ComponentList
     */
    return core.Widget.extend({
        /*jshint validthis:true */

        // constants
        TYPE_SEPARATOR: 'separator',

        View: View,

        /**
         * The init method is automatically called by the constructor when using the "new" operator. If an object with
         * key/value pairs was passed into the constructor then the options variable will have those key/value pairs.
         *
         * @method init
         * @param {Object} options
         * @private
         */
        init: function (options) {
            this.selectedItem = {};
        },

        /**
         * Overrides method from widget.
         * Executes every time, when added back to the screen.
         *
         * @method onViewReady
         * @private
         */
        onViewReady: function () {
            // TODO: not yet in jsCore. Will be removed in the future.
            this.view.afterRender();

            if (this.options.items !== undefined) {
                this.setItems(this.options.items);
            }

            this.getElement().addEventHandler('itemSelected', function () {
                this.trigger('itemSelected');
            }, this);
        },

        /**
         * Gets values from the ComponentList
         *
         * @method getItems
         * @return {Array} items
         */
        getItems: function () {
            return this.items;
        },

        /**
         * Sets values to the ComponentList
         *
         * @method setItems
         * @param {Array} items
         */
        setItems: function (items) {
            this.getElement().children().forEach(function (child) {
                child.remove();
            });

            if (items.length === 0) {
                return;
            }
            this.items = items;

            items.forEach(function (itemObj, index) {
                if (itemObj.type === this.TYPE_SEPARATOR) {
                    this.view.addSeparator();
                } else {
                    var $item = this.view.addItem(itemObj);
                    $item.addEventHandler('click', function () {
                        _onListItemClicked.call(this, index);
                    }, this);
                }
            }, this);
        },

        /**
         * Returns current selected item
         *
         * @method getSelectedValue
         * @return {String}
         */
        getSelectedValue: function () {
            return this.selectedItem;
        }

        /**
         * Add event handle for the ComponentList
         *
         * @method addEventHandler
         * @param {String} action
         * @param {Function} callback
         * @param {Object} context
         */

    });

    /* ++++++++++++++++++++++++++++++++++++++++++ PRIVATE METHODS ++++++++++++++++++++++++++++++++++++++++++ */

    /**
     * An event which is executed when on the list item is clicked
     *
     * @method _onListItemClicked
     * @param {int} index
     * @private
     */
    function _onListItemClicked (index) {
        this.selectedItem = this.items[index];
        if (this.selectedItem !== null) {
            this.trigger('itemSelected');
        }
    }


});

define('widgets/ComponentList', ['widgets/ComponentList/ComponentList'], function (main) { return main; });
