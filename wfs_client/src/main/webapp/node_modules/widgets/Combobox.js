
define('text!widgets/Combobox/_combobox.html',[],function () { return '<div class="ebCombobox">\n    <input type="text" class="ebInput ebInput_noMargin ebInput_noRightSide"/>\n    <button type="button" class="ebCombobox-Helper"><span class="ebCombobox-iconHolder"><i\n            class="ebIcon ebIcon_small ebIcon_downArrow_10px ebIcon_noVertAlign"></i></span></button>\n    <div class="ebCombobox-list"></div>\n</div>';});

/*global define*/
define('widgets/Combobox/ComboboxView',[
    "jscore/core",
    "text!./_combobox.html"
], function (core, template) {
    

    var ComboboxView = core.View.extend({

        // TODO: Should be added to core.View and executed after render()
        afterRender: function () {
            this.input = this.getElement().find('.' + ComboboxView.EL_INPUT);
            this.helper = this.getElement().find('.' + ComboboxView.EL_HELPER);
            this.list = this.getElement().find('.' + ComboboxView.EL_LIST);
        },

        getTemplate: function () {
            return template;
        },

        getRoot: function () {
            return this.getElement();
        },

        getInput: function () {
            return this.input;
        },

        getHelper: function () {
            return this.helper;
        },

        getList: function () {
            return this.list;
        }

    }, {
        'EL_INPUT': 'ebInput',
        'EL_HELPER': 'ebCombobox-Helper',
        'EL_LIST': 'ebCombobox-list'
    });

    return ComboboxView;

});
define('text!widgets/ComponentList/_componentList.html',[],function () { return '<div class="ebComponentList"></div>';});

define('text!widgets/ComponentList/_componentListItem.html',[],function () { return '<div class="ebComponentList-item"></div>';});

define('text!widgets/ComponentList/_componentListSeparator.html',[],function () { return '<div class="ebComponentList-separator"></div>';});

/*global define*/
define('widgets/ComponentList/ComponentListView',[
    'jscore/core',
    'text!./_componentList.html',
    'text!./_componentListItem.html',
    'text!./_componentListSeparator.html'
], function (core, template, listItemTemplate, listSeparatorTemplate) {
    

    return core.View.extend({

        getTemplate: function () {
            return template;
        },

        // TODO: Should be added to core.View and executed after render()
        afterRender: function () {},

        addItem: function (itemObj) {
            var $itemEl = core.Element.parse(listItemTemplate);
            $itemEl.setText(itemObj.name);
            $itemEl.setAttribute('title', itemObj.title ? itemObj.title : itemObj.name);

            this.getElement().append($itemEl);
            return $itemEl;
        },

        addSeparator: function () {
            this.getElement().append(core.Element.parse(listSeparatorTemplate));
        }

    });

});
/*global define, Object*/
define('widgets/ComponentList/ComponentList',[
    'widgets/main',
    './ComponentListView'
], function (core, View) {
    

    /**
     * The ComponentList class uses the Ericsson brand assets.<br>
     * The ComponentList can be instantiated using the constructor ComponentList.
     *
     * <strong>Constructor:</strong>
     *   <ul>
     *     <li>ComponentList(Object options)</li>
     *   </ul>
     *
     * <strong>Events:</strong>
     *   <ul>
     *     <li>itemSelected: this event is triggered when value is selected in the ComponentList</li>
     *   </ul>
     *
     * <strong>Options:</strong>
     *   <ul>
     *       <li>items: an array used as a list of available items in the ComponentList</li>
     *   </ul>
     *
     * @private
     * @class ComponentList
     */
    return core.Widget.extend({
        /*jshint validthis:true */

        // constants
        TYPE_SEPARATOR: 'separator',

        View: View,

        /**
         * The init method is automatically called by the constructor when using the "new" operator. If an object with
         * key/value pairs was passed into the constructor then the options variable will have those key/value pairs.
         *
         * @method init
         * @param {Object} options
         * @private
         */
        init: function (options) {
            this.selectedItem = {};
        },

        /**
         * Overrides method from widget.
         * Executes every time, when added back to the screen.
         *
         * @method onViewReady
         * @private
         */
        onViewReady: function () {
            // TODO: not yet in jsCore. Will be removed in the future.
            this.view.afterRender();

            if (this.options.items !== undefined) {
                this.setItems(this.options.items);
            }

            this.getElement().addEventHandler('itemSelected', function () {
                this.trigger('itemSelected');
            }, this);
        },

        /**
         * Gets values from the ComponentList
         *
         * @method getItems
         * @return {Array} items
         */
        getItems: function () {
            return this.items;
        },

        /**
         * Sets values to the ComponentList
         *
         * @method setItems
         * @param {Array} items
         */
        setItems: function (items) {
            this.getElement().children().forEach(function (child) {
                child.remove();
            });

            if (items.length === 0) {
                return;
            }
            this.items = items;

            items.forEach(function (itemObj, index) {
                if (itemObj.type === this.TYPE_SEPARATOR) {
                    this.view.addSeparator();
                } else {
                    var $item = this.view.addItem(itemObj);
                    $item.addEventHandler('click', function () {
                        _onListItemClicked.call(this, index);
                    }, this);
                }
            }, this);
        },

        /**
         * Returns current selected item
         *
         * @method getSelectedValue
         * @return {String}
         */
        getSelectedValue: function () {
            return this.selectedItem;
        }

        /**
         * Add event handle for the ComponentList
         *
         * @method addEventHandler
         * @param {String} action
         * @param {Function} callback
         * @param {Object} context
         */

    });

    /* ++++++++++++++++++++++++++++++++++++++++++ PRIVATE METHODS ++++++++++++++++++++++++++++++++++++++++++ */

    /**
     * An event which is executed when on the list item is clicked
     *
     * @method _onListItemClicked
     * @param {int} index
     * @private
     */
    function _onListItemClicked (index) {
        this.selectedItem = this.items[index];
        if (this.selectedItem !== null) {
            this.trigger('itemSelected');
        }
    }


});

define('widgets/ComponentList', ['widgets/ComponentList/ComponentList'], function (main) { return main; });

/*global define*/
define('widgets/Combobox/Combobox',[
    'widgets/main',
    './ComboboxView',
    'widgets/ComponentList'
], function (core, View, ComponentList) {
    

    /**
     * The Combobox class uses the Ericsson brand assets.<br>
     * The Combobox can be instantiated using the constructor Combobox.
     *
     * <strong>Constructor:</strong>
     *   <ul>
     *     <li>Combobox(Object options)</li>
     *   </ul>
     *
     * <strong>Events:</strong>
     *   <ul>
     *     <li>change: this event is triggered when value is changed in the Combobox</li>
     *     <li>focus: this event is triggered when the Combobox is focused</li>
     *     <li>click: this event is triggered when user clicks on the Combobox button</li>
     *   </ul>
     *
     * <strong>Options:</strong>
     *   <ul>
     *       <li>placeholder: a string used as a default name of the Combobox</li>
     *       <li>value: an object used as a selected item of the Combobox</li>
     *       <li>items: an array used as a list of available items in the Combobox</li>
     *       <li>enabled: boolean indicating whether the Combobox should be enabled. Default is true.</li>
     *       <li>modifiers: an array used to define modifiers for the Combobox.  (Asset Library)
     *       <a name="modifierAvailableList"></a>
     *          <br>E.g: modifiers:[{name: 'foo'}, {name: 'bar', value:'barVal'}]
     *          <ul style="padding-left: 15px;">
     *              <li>disabled: disabled</li>
     *          </ul>
     *       </li>
     *   </ul>
     *
     * @class Combobox
     */
    return core.Widget.extend({
        /*jshint validthis:true */

        View: View,

        /**
         * The init method is automatically called by the constructor when using the "new" operator. If an object with
         * key/value pairs was passed into the constructor then the options variable will have those key/value pairs.
         *
         * @method init
         * @private
         * @param {Object} options
         */
        init: function (options) {
            this.selectedItem = {};
        },

        /**
         * Overrides method from widget.
         * Executes every time, when added back to the screen.
         *
         * @method onViewReady
         * @private
         */
        onViewReady: function () {
            // TODO: not yet in jsCore. Will be removed in the future.
            this.view.afterRender();

            if (this.options.enabled === false) {
                this.disable();
            } else {
                this.enable();
            }

            this.setValue(this.options.value || {});
            this.setItems(this.options.items || []);
            this.setModifiers(this.options.modifiers || []);
            this.setPlaceholder(this.options.placeholder || '');

            this.getElement().addEventHandler('change', function () {
                this.trigger('change');
            }, this);

            this.getElement().addEventHandler('focus', function () {
                this.trigger('focus');
            }, this);

            this.view.getHelper().addEventHandler('click', function () {
                this.trigger('click');
            }, this);
        },

        /**
         * Sets value for the Combobox.
         *
         * @method setValue
         * @param {Object} value
         */
        setValue: function (value) {
            var valueName = '';
            if (value !== {}) {
                valueName = value.name;
            }
            this.selectedItem = value;
            this.view.getInput().setValue(valueName);
        },

        /**
         * Returns selected item object from the Combobox.
         *
         * @method getValue
         * @return {Object} value
         */
        getValue: function () {
            return this.selectedItem;
        },

        /**
         * Sets placeholder for the Combobox.
         *
         * @method setPlaceholder
         * @param {String} placeholder
         */
        setPlaceholder: function (placeholder) {
            this.view.getInput().setAttribute('placeholder', placeholder);
        },

        /**
         * Sets input width for the Combobox.
         * miniW, smallW, longW, xLongW: width variations (Asset Library)
         * null to reset to default
         *
         * @method setInputSize
         * @param {String} wModifier
         */
        setInputSize: function (wModifier) {
            // check if the modifier is a size modifier
            var possible = ['miniW', 'smallW', 'longW', 'xLongW'];

            if (possible.indexOf(wModifier) !== -1) {
                this.view.getInput().setModifier(wModifier);
                this.currentInputSize = wModifier;
            }
            else if (this.currentInputSize) {
                this.view.getInput().removeModifier(this.currentInputSize);
                this.currentInputSize = '';
            }
        },

        /**
         * Sets items for the Combobox. If items array is empty than the Combobox is disabled.
         *
         * @method setItems
         * @param {Array} items
         */
        setItems: function (items) {
            if (items.length > 0) {
                if (this.componentList === undefined) {
                    this.componentList = new ComponentList({
                        items: items
                    });
                    this.componentList.attachTo(this.view.getList());
                    this.componentList.addEventHandler('itemSelected', _onComponentListClick, this);
                } else {
                    this.componentList.setItems(items);
                }
            } else {
                this.disable();
            }
        },

        /**
         * Enables the Combobox.
         *
         * @method enable
         */
        enable: function () {
            this.getElement().removeModifier('disabled');
            this.view.getInput().setAttribute('disabled', false);
            this.view.getHelper().setAttribute('disabled', false);
            this.view.getHelper().addEventHandler('click', _onHelperClick, this);
        },

        /**
         * Disables the Combobox.
         *
         * @method disable
         */
        disable: function () {
            this.getElement().setModifier('disabled');
            this.view.getInput().setAttribute('disabled', true);
            this.view.getHelper().setAttribute('disabled', true);
            this.view.getHelper().removeEventHandler('click');
        },

        /**
         * Add a single modifier to the widget.<br>
         * <a href="#modifierAvailableList">see available modifiers</a>
         *
         * @method setModifier
         * @param {String} key
         * @param {String|boolean|int} value
         */
        setModifier: function (key, value) {
            this.getElement().setModifier(key, value);
        },

        /**
         * A methods, which allows to define a list of modifiers to the widget.<br>
         * <a href="#modifierAvailableList">see available modifiers</a>
         *
         * @param {Array} modifiers Contains objects {name: {String}[, value: {String}]}
         */
        setModifiers: function (modifiers) {
            modifiers.forEach(function (modifier) {
                this.setModifier(modifier.name, modifier.value);
            }, this);
        },

        /**
         * Remove the modifier 'key' from the widget modifiers.
         *
         * @method removeModifier
         * @param {String} key
         */
        removeModifier: function (key) {
            this.getElement().removeModifier(key);
        }

        /**
         * Adds the Widget's element to the new parent element.
         *
         * @method attachTo
         * @param {Element} parent
         * @example
         *    widget.attachTo(this.getElement());
         */

        /**
         * Places the detached Widget back into the defined parent element.
         *
         * @method attach
         * @example
         *  widget.attach();
         */

        /**
         * Removes the Widget from the parent element, but does not destroy the Widget. DOM events will still work when Widget is attached back.
         *
         * @method detach
         * @example
         *  widget.detach();
         */

        /**
         * Add event handler to the Combobox.
         *
         * @method addEventHandler
         * @param {String} action  (change | focus | click)
         * @param {Function} callback
         * @param {Object} context
         * @return {String} eventID
         */

        /**
         * Remove the event handler from the Combobox.
         *
         * @method removeEventHandler
         * @param {String} eventID
         */

    });

    /* ++++++++++++++++++++++++++++++++++++++++++ PRIVATE METHODS ++++++++++++++++++++++++++++++++++++++++++ */

    /**
     * An event which is executed when clicked on the Combobox helper button
     *
     * @method _onHelperClick
     * @private
     */
    function _onHelperClick () {
        this.view.getInput().trigger('focus');
    }

    /**
     * An event which is executed when an value is selected from the ComponentList
     *
     * @method _onComponentListClick
     * @private
     */
    function _onComponentListClick () {
        var selectedVal = this.componentList.getSelectedValue();
        if (selectedVal !== this.getValue()) {
            this.setValue(selectedVal);
            this.view.getInput().trigger('change');
        }
    }

});

define('widgets/Combobox', ['widgets/Combobox/Combobox'], function (main) { return main; });
